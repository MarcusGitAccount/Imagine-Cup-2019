"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonSpeaker = require('./commonSpeaker');

/**
 * Speaker Verification APIs can automatically verify and authenticate users using their voice or speech.
 * 
 * Enrollment for speaker verification is text-dependent, which means speakers need to choose a specific pass phrase to use during both enrollment and verification phases.
 * In enrollment, the speaker's voice is recorded saying a specific phrase, then a number of features are extracted and the chosen phrase is recognized. 
 * Together, both extracted features and the chosen phrase form a unique voice signature.
 * 
 * In verification, an input voice and phrase are compared against the enrollment's voice signature and phrase – 
 * in order to verify whether or not they are from the same person, and if they are saying the correct phrase.
 */

var speakerVerification = function (_commonSpeaker) {
    _inherits(speakerVerification, _commonSpeaker);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function speakerVerification(_ref) {
        var apiKey = _ref.apiKey,
            endpoint = _ref.endpoint;

        _classCallCheck(this, speakerVerification);

        return _possibleConstructorReturn(this, _commonSpeaker.call(this, { apiKey: apiKey, endpoint: endpoint }));
    }

    /**
     * Returns the list of supported verification phrases that can be used for "Create Enrollment" and "Verification".
     * @returns {Promise.<object>}
     */


    speakerVerification.prototype.listAllSupportedVerificationPhrases = function listAllSupportedVerificationPhrases(_ref2) {
        var parameters = _ref2.parameters;


        var operation = {
            "path": "spid/v1.0/verificationPhrases",
            "method": "GET",
            "operationId": "5652c0801984551c3859634d",
            "parameters": [{
                "name": "locale",
                "description": "Locale for the language when retrieving verification phrases.",
                "value": "en-US",
                "options": ['en-US', 'zh-CN'],
                "required": true,
                "type": "queryStringParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Create a new speaker verification profile with specific locale.
     * One subscription can only create 1000 speaker verification/identification profiles at most.
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.createProfile = function createProfile(_ref3) {
        var body = _ref3.body;


        var operation = {
            "path": "spid/v1.0/verificationProfiles",
            "method": "POST",
            "operationId": "5645c068e597ed22ec38f42e",
            "parameters": [{
                "name": "locale",
                "description": "Locale for language of the new speaker verification profile. ",
                "value": null,
                "options": ['en-US', 'zh-CN'],
                "required": true,
                "type": "inBody",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Deletes both speaker verification profile and all associated enrollments permanently from the service.
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.deleteProfile = function deleteProfile(_ref4) {
        var parameters = _ref4.parameters;


        var operation = {
            "path": "spid/v1.0/verificationProfiles/{verificationProfileId}",
            "method": "DELETE",
            "operationId": "563309b7778daf06340c9655",
            "parameters": [{
                "name": "verificationProfileId",
                "description": "ID of speaker verification profile. It should be a GUID.",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Get all speaker verification profiles within the subscription.
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.getAllProfiles = function getAllProfiles() {

        var operation = {
            "path": "spid/v1.0/verificationProfiles",
            "method": "GET",
            "operationId": "563309b7778daf06340c9653"
        };

        return this.makeRequest({
            operation: operation
        });
    };

    /**
     * Get a speaker verification profile by verificationProfileId
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.getProfile = function getProfile(_ref5) {
        var parameters = _ref5.parameters;


        var operation = {
            "path": "spid/v1.0/verificationProfiles/{verificationProfileId}",
            "method": "GET",
            "operationId": "56409ee2778daf19706420de",
            "parameters": [{
                "name": "verificationProfileId",
                "description": "ID of speaker verification profile. It should be a GUID.",
                "value": "",
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Enrollment for speaker verification is text-dependent, which means speaker need to choose a specific phrase to use in both enrollment and verification. 
     * List of supported phrases can be found in "List All Supported Verification Phrases".
     * The service requires at least 3 enrollments for each speaker before the profile can be used in verification scenarios. 
     * It is recommended to use the same device (mic) in both enrollment and verification.
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.createEnrollment = function createEnrollment(_ref6) {
        var parameters = _ref6.parameters,
            headers = _ref6.headers,
            body = _ref6.body;


        var operation = {
            "path": "spid/v1.0/verificationProfiles/{verificationProfileId}/enroll",
            "method": "POST",
            "operationId": "56406930e597ed20c8d8549c",
            "headers": [{
                "name": "Content-Type",
                "description": "Media type of the body sent to the API.",
                "options": ["application/octet-stream", "multipart/form-data"],
                "required": false,
                "typeName": "string"
            }],
            "parameters": [{
                "name": "verificationProfileId",
                "description": "ID of speaker verification profile. GUID returned from Verification Profile - Create Profile API",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters,
            headers: headers,
            body: body
        });
    };

    /**
     * Deletes all enrollments associated with the given speaker’s verification profile permanently from the service.
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.resetEnrollments = function resetEnrollments(_ref7) {
        var parameters = _ref7.parameters;


        var operation = {
            "path": "spid/v1.0/verificationProfiles/{verificationProfileId}/reset",
            "method": "POST",
            "operationId": "56406930e597ed20c8d8549b",
            "parameters": [{
                "name": "verificationProfileId",
                "description": "ID of speaker verification profile. It should be a GUID.",
                "value": "",
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Automatically verify and authenticate users using their voice or speech.
     * @returns {Promise.<object>}
     */
    speakerVerification.prototype.verify = function verify(_ref8) {
        var parameters = _ref8.parameters,
            headers = _ref8.headers,
            body = _ref8.body;


        var operation = {
            "path": "spid/v1.0/verify",
            "method": "POST",
            "operationId": "5645c725ca73070ee8845bd6",
            "headers": [{
                "name": "Content-Type",
                "description": "Media type of the body sent to the API.",
                "options": ["application/octet-stream", "multipart/form-data"],
                "required": false,
                "typeName": "string"
            }],
            "parameters": [{
                "name": "verificationProfileId",
                "description": "ID of speaker verification profile. It should be a GUID.",
                "value": null,
                "required": true,
                "type": "queryStringParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters,
            headers: headers,
            body: body
        });
    };

    return speakerVerification;
}(commonSpeaker);

module.exports = speakerVerification;