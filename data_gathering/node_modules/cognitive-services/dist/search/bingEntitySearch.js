"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');

/**
 * The Bing Entity Search API returns entities.
 * @augments commonService
 * {@link https://dev.cognitive.microsoft.com/docs/services/7a3fb374be374859a823b79fd938cc65/operations/52069701a465405ab3286f82|documentation}
 */

var bingEntitySearch = function (_commonService) {
    _inherits(bingEntitySearch, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     */
    function bingEntitySearch(_ref) {
        var apiKey = _ref.apiKey;

        _classCallCheck(this, bingEntitySearch);

        var endpoint = "api.cognitive.microsoft.com";

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.endpoints = [endpoint];
        return _this;
    }

    /**
     * Get entities and places results for a given query.
     * @returns {Promise.<object>}
     */


    bingEntitySearch.prototype.getEntities = function getEntities(_ref2) {
        var parameters = _ref2.parameters;


        var operation = {
            "path": "bing/v7.0/entities",
            "method": "GET",
            "operationId": "52069701a465405ab3286f82",
            "headers": this.headers,
            "parameters": [{
                "name": "q",
                "description": "Query",
                "required": true,
                "type": "queryStringParam",
                "typeName": "string"
            }, {
                "name": "mkt",
                "description": "The market where the results come from. Typically, this is the country where the user is making the request from; \
                however, it could be a different country if the user is not located in a country where Bing delivers results.\
                The market must be in the form 'language code-country code'. For example, en-US.",
                "options": ["en-us"],
                "required": true,
                "type": "queryStringParam",
                "typeName": "string"
            }, {
                "name": "count",
                "description": "The number of search results to return in the response. The actual number delivered may be less than requested.",
                "required": false,
                "type": "queryStringParam",
                "typeName": "number"
            }, {
                "name": "offset",
                "description": "The zero-based offset that indicates the number of search results to skip before returning results.",
                "required": false,
                "type": "queryStringParam",
                "typeName": "number"
            }, {
                "name": "safesearch",
                "description": "A filter used to filter results for adult content.",
                "options": ["off", 'moderate', 'strict'],
                "required": false,
                "type": "queryStringParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    return bingEntitySearch;
}(commonService);

module.exports = bingEntitySearch;