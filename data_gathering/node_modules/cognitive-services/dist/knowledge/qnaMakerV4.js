"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');

/**
 * Microsoft QnA Maker is a free, easy-to-use, REST API and web-based service that trains AI to respond to user's questions in a more natural, conversational way. Compatible across development platforms, hosting services, and channels, QnA Maker is the only question and answer service with a graphical user interface—meaning you don’t need to be a developer to train, manage, and use it for a wide range of solutions.
 * 
 * With optimized machine learning logic and the ability to integrate industry-leading language processing with ease, QnA Maker distills masses of information into distinct, helpful answers
 * 
 * @augments commonService
 * {@link https://westus.dev.cognitive.microsoft.com/docs/services/5a93fcf85b4ccd136866eb37/operations/5ac266295b4ccd1554da75ff|documentation}
 */

var qnaMakerV4 = function (_commonService) {
    _inherits(qnaMakerV4, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function qnaMakerV4(_ref) {
        var apiKey = _ref.apiKey,
            endpoint = _ref.endpoint;

        _classCallCheck(this, qnaMakerV4);

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.endpoints = ["westus.api.cognitive.microsoft.com"];
        return _this;
    }

    /**
     * Creates a new knowledge base.
     * @returns {Promise.<object>}
    */


    qnaMakerV4.prototype.createKnowledgeBase = function createKnowledgeBase(_ref2) {
        var body = _ref2.body;


        var operation = {
            "path": "qnamaker/v4.0/knowledgebases/create",
            "method": "POST",
            "operationId": "5ac266295b4ccd1554da75ff",
            "parameters": [{
                "name": "name",
                "description": "Friendly name for the knowledge base (Required).",
                "value": null,
                "required": true,
                "type": "inBody",
                "typeName": "string"
            }, {
                "name": "qnaList",
                "description": "List of question and answer pairs to be added to the knowledge base. Max 1000 Q-A pairs per request.",
                "value": null,
                "required": true,
                "type": "inBody",
                "typeName": "array"
            }, {
                "name": "urls",
                "description": "List of URLs to be processed and indexed in the knowledge base. In case of existing URL, it will be fetched again and KB will be updated with new data. Max 5 urls per request.",
                "value": null,
                "required": false,
                "type": "inBody",
                "typeName": "array"
            }, {
                "name": "files",
                "description": "List of files",
                "value": null,
                "required": false,
                "type": "inBody",
                "typeName": "array"
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Deletes the specified knowledge base and all data associated with it.
     * @returns {Promise.<object>}
    */
    qnaMakerV4.prototype.deleteKnowledgeBase = function deleteKnowledgeBase(_ref3) {
        var parameters = _ref3.parameters;


        var operation = {
            "path": "qnamaker/v4.0/knowledgebases/{knowledgeBaseId}",
            "method": "DELETE",
            "operationId": "58994a073d9e041ad42d9bab",
            "parameters": [{
                "name": "knowledgeBaseId",
                "description": "KB id",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Gets details of a specific long running operation.
        @returns {Promise.<object>}
    */
    qnaMakerV4.prototype.getOperationDetails = function getOperationDetails(_ref4) {
        var parameters = _ref4.parameters;


        var operation = {
            "path": "qnamaker/v4.0/operations/{id}",
            "method": "GET",
            "operationId": "operations_getoperationdetails",
            "parameters": [{
                "name": "id",
                "description": "Operation ID",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     *  Downloads all the data associated with the specified knowledge base.
     * @returns {Promise.<object>}
    */
    qnaMakerV4.prototype.downloadKnowledgeBase = function downloadKnowledgeBase(_ref5) {
        var parameters = _ref5.parameters;


        var operation = {
            "path": "qnamaker/v4.0/knowledgebases/{knowledgeBaseId}/{environment}/qna",
            "method": "GET",
            "operationId": "knowledgebases_download",
            "parameters": [{
                "name": "knowledgeBaseId",
                "description": "KB id",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }, {
                "name": "environment",
                "description": "Specifies whether environment is Test or Prod.",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Publishes all changes in test index of a knowledge base to its prod index.
     * @returns {Promise.<object>}
    */
    qnaMakerV4.prototype.publishKnowledgeBase = function publishKnowledgeBase(_ref6) {
        var parameters = _ref6.parameters;


        var operation = {
            "path": "qnamaker/v4.0/knowledgebases/{knowledgeBaseId}",
            "method": "POST",
            "operationId": "5ac266295b4ccd1554da75feS",
            "parameters": [{
                "name": "knowledgeBaseId",
                "description": "KB id",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters
        });
    };

    /**
     * Download alterations from runtime.
     * @returns {Promise.<object>}
    */
    qnaMakerV4.prototype.getAlterations = function getAlterations() {

        var operation = {
            "path": "qnamaker/v4.0/alterations",
            "method": "GET",
            "operationId": "5ac266295b4ccd1554da75fc",
            "parameters": []
        };

        return this.makeRequest({
            operation: operation
        });
    };

    /**
     * Replaces word alterations (synonyms) for the KB with the give records.
     * @returns {Promise.<object>}
    */
    qnaMakerV4.prototype.updateAlterations = function updateAlterations(_ref7) {
        var parameters = _ref7.parameters,
            body = _ref7.body;


        var operation = {
            "path": "qnamaker/v4.0/alterations",
            "method": "PATCH",
            "operationId": "597804082bcd591200beb3a0",
            "parameters": []
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Add or delete QnA Pairs and / or URLs to an existing knowledge base.
     * @returns {Promise.<object>}
     */
    qnaMakerV4.prototype.updateKnowledgeBase = function updateKnowledgeBase(_ref8) {
        var parameters = _ref8.parameters,
            body = _ref8.body;


        var operation = {
            "path": "qnamaker/v4.0/knowledgebases/{knowledgeBaseId}",
            "method": "PATCH",
            "operationId": "58994a083d9e041ad42d9bad",
            "parameters": [{
                "name": "knowledgeBaseId",
                "description": "KB id",
                "value": null,
                "required": true,
                "type": "routeParam",
                "typeName": "string"
            }, {
                "name": "add",
                "description": "Data to be added to the knowledge base.",
                "value": null,
                "required": false,
                "type": "inBody",
                "typeName": "object"
            }, {
                "name": "delete",
                "description": "Data to be deleted from the knowledge base",
                "value": null,
                "required": false,
                "type": "inBody",
                "typeName": "object"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    return qnaMakerV4;
}(commonService);

module.exports = qnaMakerV4;