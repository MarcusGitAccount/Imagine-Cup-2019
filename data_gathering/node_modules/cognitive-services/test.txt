
> cognitive-services@1.2.0 test C:\Users\mparn\Documents\GitHub\node-cognitive-services
> gulp test

[23:00:44] Using gulpfile ~\Documents\GitHub\node-cognitive-services\gulpfile.js
[23:00:45] Starting 'pre-test'...
[23:00:45] Finished 'pre-test' after 629 ms
[23:00:45] Starting 'test'...


  API Test
    √ should throw an error if a body parameter is required for json and not present
    √ should throw an error if the boolean body parameter has a value other than true or false
    √ should throw an error if a body parameter is required and its value is not in the list of options
    √ should throw an error if a parameter is required and not present
    √ should throw an error if more than one parameter is required but not present
    √ should throw an error if a parameter is required and its value is not in the list of options
    √ should accept a list of options for parameters
    √ should throw an error if the boolean parameter has a value other than true or false
    √ should not throw an error if the endpoint is supported
    √ should throw an error if the endpoint is not supported
    √ should throw an error if a header is required but not present
    √ should throw an error if more than one headers are required but not present

  Bing spell check
    spellCheck
      √ should return response (485ms)

  Bing spell check v7
    spellCheck
      √ should return response (304ms)

  Language understanding (LUIS)
    Delete app after
      √ should import app (14219ms)
      √ should add prebuilt domain (11945ms)
    Create app before, delete app after
      √ should detect Intent from ENDPOINT (2444ms)
      √ should get list of LUIS applications (2311ms)
      √ should get list of LUIS assistants (2307ms)
      √ should get list of LUIS domains (2249ms)
      √ should get list of LUIS usage scenarios (2295ms)
      √ should get list of LUIS cultures (2320ms)
      1) should get list of LUIS custom prebuilt domains
      2) should get list of LUIS custom prebuilt domains for each supported culture
      √ should return array with endpoint queries for this APP (2297ms)
      √ should get APP (2523ms)
      √ should update APP name (2334ms)
      √ should update APP settings (3084ms)
      √ should get APP endpoints (2246ms)
      √ should get APP querylogs (2266ms)
      √ should get APP settings (2295ms)
      √ should get APP permissions (2287ms)
      √ should add email to permissions to APP (2339ms)
      √ should update APP permissions (2365ms)
      √ should delete APP permissions (7051ms)
      3) should return application version in JSON for this VERSION
      √ should get list of example labeled utterances for this VERSION (3350ms)
      4) should get list of entities in this VERSION
      √ should get list of intents in VERSION (2300ms)
      5) should get APP versions
      √ should clone VERSION (15358ms)
      6) should get app VERSION info
      √  should get VERSION features (2872ms)
      √  should get VERSION HIERARCHICALENTITIES (2874ms)
      √  should get VERSION LISTPREBUILTS (2388ms)
      7)  should get VERSION models
      √  should post VERSION closedlists (2632ms)

  Text analytics
    Detect language (POST)
      8) should return response
    Key phrases (POST)
      9) should return response
    Sentiment (POST)
      10) should return response
    Link entity
      11) should return response

  Text translator
    translate array
      √ should return response (505ms)
      √ should mark profan words when auto-detecting language (182ms)
    translate
      √ should return response (344ms)
    get language names
      √ should return response (128ms)
    get languages for translate
      √ should return response (160ms)
    get languages for speak
      √ should return response (168ms)
    speak
      √ should return response (218ms)
    detect
      √ should return response (122ms)
    detect array
      √ should return response (130ms)
    break sentences
      √ should return response (150ms)
    get translations
      √ should return response (224ms)
    get translations array
      √ should return response (200ms)

  Academic knowledge
    Calchistogram
      √ should return response (339ms)
    Calchistogram Post
      √ should return response (173ms)
    Evaluate
      √ should return response (134ms)
    Evaluate Post
      √ should return response (137ms)
    GraphSearch
      12) should return response
    Interpret
      √ should return response (159ms)
    Interpret Post
      √ should return response (163ms)
    Get similarity
      √ should return response (181ms)
    Post similarity
      √ should return response (224ms)

  QnA maker
Generating knowledge base...
    Download knowledge base
      √ should return response (234ms)
    Generate answer
      √ should return response (1163ms)
    Get alterations
      √ should return response (347ms)
    Publish knowledge base
      √ should return response (1081ms)
    Train knowledge base
      √ should return response (792ms)
    Update alterations
      √ should return response (919ms)
    Update knowledge base
      √ should return response (5140ms)
Deleting knowledge base...

  QnA maker v4
Generating knowledge base...
    13) "before all" hook

  Recommendations
    Get all models
      14) should get response

  Bing autosuggest
    Suggestions
      √ should return response (292ms)

  Bing autosuggest v7
    Suggestions
      √ should return response (231ms)

  Bing entity search
    Get entities
      15) should return response

  Bing Image Search
    Search
      √ should get image insights (695ms)
      √ should get results for a query (773ms)
      √ should get trending images (371ms)

  Bing Image Search v7
    Image Insights
      16) should get image insights
    search
      √ should get results for a query (682ms)
    trending images
      √ should get response (348ms)

  Bing news search
    News by category
      √ should return response (275ms)
    Search
      √ should return response (589ms)
    Trending news
      √ should return response (318ms)

  Bing news search v7
    News by category
      √ should return response (349ms)
    Search
      √ should return response (515ms)
    Trending news
      √ should return response (300ms)

  Bing video search
    Search
      √ should return response (620ms)
    Trending
      √ should return response (479ms)
    Details
      √ should return response (299ms)

  Bing video search v7
    Search
      √ should return response (424ms)
    Trending
      √ should return response (329ms)
    Details
      √ should return response (426ms)

  Bing web search
    Search
      √ should return response (594ms)

  Bing web search v7
    Search
      √ should return response (560ms)

  Bing speech
    Speech to text
      √ should get text (1247ms)
    Text to speech
      √ should get speech (576ms)

  Speaker identification
Creating identification profile...
    √ should get one profile (221ms)
    √ should get all profiles (218ms)
Enrolling identification profile...
    √ should enroll one time and get operation status (3323ms)
    √ should get operation id from identification (610ms)
Deleting enrollmments...
Deleting identification profile...

  Speaker verification
Creating verification profile...
    √ should get one profile (269ms)
    √ should get all profiles (299ms)
Creating 3 enrollments...
    √ should enroll three times and then verify (5135ms)
    √ should list all verification phrases (237ms)
Deleting enrollmments...
Deleting verification profile...

  Computer vision
    Analyze Image (POST)
      √ should accept application/json (2026ms)
      √ should accept application/octet-stream (810ms)
    Describe image (POST)
      √ should accept application/json (1955ms)
    Get thumbnail (POST)
      √ should accept application/json (916ms)
    List domain specific models (GET)
      √ should return list (166ms)
    Recognize domain specific content (POST)
      √ should accept application/json (1475ms)
    Tag images (POST)
      √ should accept application/json (707ms)
    Recognize handwritten text (POST and GET)
      √ should accept application/octet-stream (1706ms)
    OCR (POST)
      √ should accept application/json (313ms)
      √ should accept file (1447ms)

  Content moderator
    Detect language in text
      √ should return response (148ms)
    Screen text
      √ should return response (236ms)
    Evaluate image
      √ should return response when image is sent in body (354ms)
      √ should return response when image is sent in JSON url (529ms)
    Get faces from image
      √ should return response when image is sent in body (314ms)
      √ should return response when image is sent in JSON url (1187ms)
    OCR
      √ should return response when image is sent in JSON url (379ms)
    Image Lists
Creating image list...
Adding image to list...
      √ should get list details (178ms)
      √ should refresh search index (159ms)
      √ should update list details (229ms)
      √ should get all image lists (151ms)
      √ should get all image IDs from a list (236ms)
      √ should delete image from list (360ms)
      √ should match against an image list (274ms)
Deleting all images from list...
Deleting image list...
    Terms Lists
Creating term list...
Adding term to list...
      √ should get term list details (363ms)
      √ should refresh search index (238ms)
      √ should update term list details (1117ms)
      √ should get all term lists (171ms)
      √ should get all terms from a list (490ms)
      √ should delete term from list (332ms)
      √ should try to match term against list (783ms)
Deleting all terms from list...
Deleting term list...

  Emotion
    Recognize emotion (POST)
      √ should return response (243ms)
    Recognize emotion with face rectangles (POST)
      √ should return response (171ms)

  Face
    Face
      √ should detect when body is in json format (1005ms)
      √ should detect when body is in binary (418ms)
      √ should find similar (303ms)
      √ should group faces (119ms)
      √ should verify faces (165ms)
    Face list
      √ should get a face list, list them all (375ms)
      √ should add a face to the face list and delete it (844ms)
      √ should update a face list (208ms)
    Large face list
      √ should get a large face list, list them all (377ms)
      √ should add a face to the large face list, get it and delete it (877ms)
      √ should add a face to the large face list and update it and list it (894ms)
      √ should list faces in a large face list (911ms)
      √ should update a large face list (227ms)
      √ should train a large face list and get training status (426ms)
    Person
      √ should add a person face with a picture in a URL (383ms)
      √ should add a person face with a binary image (329ms)
      √ should update a person (188ms)
    Person group
      √ should get a person group, and list them all (469ms)
      √ should update a person group (222ms)
      √ should train a person group and get training status (408ms)
      √ should list persons in a person group (170ms)
undefined

  Video indexer
    Upload video in body
Uploading video...
      17) "before all" hook
    Accounts
      18) should get accounts
    Search
      19) should search


  152 passing (4m)
  19 failing

  1) Language understanding (LUIS) Create app before, delete app after should get list of LUIS custom prebuilt domains:
     AssertionError: expected Array [
  Object {
    name: 'Calendar',
    culture: 'en-us',
    description: 'The Calendar domain provides intents and entities related to calendar entries. The Calendar intents include adding, deleting or editing an appointment, checking availability, and finding information about a calendar entry or appointment.',
    examples: 'Make an appointment with Lisa at 2pm on Sunday; When is Jim available to meet?; Delete my 9 am meeting',
    intents: Array [
      Object {
        name: 'Add',
        description: 'Add a new one-time item to the calendar.',
        examples: 'Make an appointment with Lisa at 2pm on Sunday; I want to schedule a meeting ; I need to set up a meeting'
      },
      Object {
        name: 'CheckAvailability',
        description: 'Find availability for an appointment or meeting on the user\'s calendar or another person\'s calendar.',
        examples: 'When is Jim available to meet?; Show when Carol is available tomorrow; Is Chris free on Saturday?'
      },
      Object {
        name: 'Delete',
        description: 'Request to delete a calendar entry.',
        examples: 'Cancel my appointment with Carol; Delete my 9 am meeting'
      },
      Object {
        name: 'Edit',
        description: 'Request to change an existing meeting or calendar entry.',
        examples: 'Move my 9 am meeting to 10 am; I want to update my schedule; Reschdule my meeting with Ryan'
      },
      Object {
        name: 'Find',
        description: 'Request to view or find information about their calendar or any specific existing calendar entry.',
        examples: 'Display my weekly calendar;  Show my calendar;  Find the dentist review appointment.'
      }
    ],
    entities: Array [
      Object {
        name: 'Location',
        description: '"Location of calendar item, meeting or appointment. Addresses, cities, and regions are good examples of locations."',
        examples: '209 Nashville Gym; 897 Pancake house; Garage'
      },
      Object {
        name: 'Subject',
        description: 'The title of a meeting or appointment.',
        examples: 'Dentist\'s appointment;  Lunch with Julia; Doctor\'s appointment'
      }
    ]
  },
  Object {
    name: 'Camera',
    culture: 'en-us',
    description: 'The Camera domain provides intents and entities related to using a camera. The intents cover capturing a photo, selfie, screenshot or video, and broadcasting video to an application.',
    examples: 'Capture the screen; Take a selfie; Start broadcasting to Facebook',
    intents: Array [
      Object {
        name: 'CapturePhoto',
        description: 'Capture a photo.',
        examples: 'Take a photo; capture'
      },
      Object {
        name: 'CaptureScreenshot',
        description: 'Capture a screenshot.',
        examples: 'Take screen shot; capture the screen'
      },
      Object {
        name: 'CaptureSelfie',
        description: 'Capture a selfie.',
        examples: 'Take a selfie; take a picture of me'
      },
      Object {
        name: 'CaptureVideo',
        description: 'Start recording video.',
        examples: 'Start recording; Begin recording'
      },
      Object {
        name: 'StartBroadcasting',
        description: 'Start broadcasting video.',
        examples: 'Start broadcasting to Facebook'
      },
      Object {
        name: 'StopBroadcasting',
        description: 'Stop broadcasting video.',
        examples: 'Stop broadcasting'
      },
      Object {
        name: 'StopVideoRecording',
        description: 'Stop recording a video.',
        examples: 'That\'s enough; stop recording'
      }
    ],
    entities: Array [
      Object {
        name: 'AppName',
        description: 'The name of an application to broadcast video to.',
        examples: 'OneNote; Facebook; Skype'
      }
    ]
  },
  Object {
    name: 'Communication',
    culture: 'en-us',
    description: 'The Communication domain provides intents and entities related to email, messages and phone calls.',
    examples: 'Connect me to my voicemail box; Save this number and put the name as Carol; Switch on call forwarding to 3333',
    intents: Array [
      Object {
        name: 'AddContact',
        description: 'Add a new contact to the user\'s list of contacts.',
        examples: 'Add new contact; Save this number and put the name as Carol'
      },
      Object {
        name: 'AddMore',
        description: '"Add more to an email or text, as part of a step-wise email or text composition."',
        examples: 'Add more to text; Add more to email body'
      },
      Object {
        name: 'Answer',
        description: 'Answer an incoming phone call.',
        examples: 'Answer the call; Pick it up'
      },
      Object {
        name: 'AssignContactNickname',
        description: 'Assign a nickname to a contact.',
        examples: 'Change Isaac to dad; Add nickname to Carol Hanna; Edit Jim\'s nickname'
      },
      Object {
        name: 'CallVoiceMail',
        description: 'Connect to the user\'s voice mail.',
        examples: 'Connect me to my voicemail box; Call voicemail; Voice mail'
      },
      Object {
        name: 'CheckIMStatus',
        description: 'Check the status of a contact in Skype.',
        examples: 'Is Jim\'s online status set to away?; Is Carol available to chat with?'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action.',
        examples: 'Yes; Okay; All right; I confirm that I want to send this email.'
      },
      Object {
        name: 'FindContact',
        description: 'Find contact information by name.',
        examples: 'Find Carol\'s number; Show me Carol\'s number'
      },
      Object {
        name: 'TurnForwardingOff',
        description: 'Turn off call forwarding.',
        examples: 'Stop forwarding my calls; Switch off call forwarding'
      },
      Object {
        name: 'TurnForwardingOn',
        description: 'Turn on call forwarding.',
        examples: 'Forwarding my calls to 3333; Switch on call forwarding to 3333'
      },
      Object {
        name: 'GetForwardingsStatus',
        description: 'Get the current status of call forwarding.',
        examples: 'Is my call forwarding turned on?; Tell me if my call status is on or off'
      },
      Object {
        name: 'GoBack',
        description: 'Go back to the previous step.',
        examples: 'Go back to twitter; Go back a step; Go back'
      },
      Object {
        name: 'Ignore',
        description: 'Ignore an incoming call.',
        examples: 'Don\'t answer; Ignore call'
      },
      Object {
        name: 'IgnoreWithMessage',
        description: 'Ignore an incoming call and reply with text instead.',
        examples: 'Don\'t answer that call but send a message instead; Ignore and send a text back'
      },
      Object {
        name: 'Dial',
        description: 'Make a phone call.',
        examples: 'Call Jim; Please dial 311'
      },
      Object {
        name: 'PressKey',
        description: 'Press a button or number on the keypad.',
        examples: 'Dial star; Press the 1 2 3'
      },
      Object {
        name: 'ReadAloud',
        description: 'Read a message or email to the user.',
        examples: 'read text; what did she say in the message'
      },
      Object {
        name: 'Redial',
        description: 'Redial or call a number again.',
        examples: 'redial; redial my last call'
      },
      Object {
        name: 'SendEmail',
        description: 'Send an email. This intent applies to email but not text messages.',
        examples: 'email to mike waters mike that dinner last week was splendid; send an email to bob'
      },
      Object {
        name: 'SendMessage',
        description: 'Send a text message or an instant message.',
        examples: 'Send text to Chris and Carol'
      },
      Object {
        name: 'SetSpeedDial',
        description: 'Set a speed dial shortcut for a contact\'s phone number.',
        examples: 'Set speed dial one for Carol; setup speed dial for mom'
      },
      Object {
        name: 'ShowNext',
        description: '"See the next item, for example, in a list of text messages or emails."',
        examples: 'Show the next one; go to the next page'
      },
      Object {
        name: 'ShowPrevious',
        description: '"See the previous item, for example, in a list of text messages or emails."',
        examples: 'show the previous one; previous; go to previous'
      },
      Object {
        name: 'TurnSpeakerOff',
        description: 'Turn off the speaker phone.',
        examples: 'take me off speaker; turn off speakerphone'
      },
      Object {
        name: 'TurnSpeakerOn',
        description: 'Turn on the speaker phone.',
        examples: 'speakerphone mode; put speakerphone on'
      },
      Object {
        name: 'StartOver',
        description: 'Start the system over or start a new session.',
        examples: 'Start over;  New session; restart'
      },
      Object {
        name: 'FindSpeedDial',
        description: 'Find the speedial number a phone number is set to and vice versa.',
        examples: 'What is my dial number 5?; Do I have speed dial set?; What is the dial number for 941-5555-333?'
      },
      Object {
        name: 'Reject',
        description: 'Reject an incoming call.',
        examples: 'Reject call; Can\'t answer now; Not available at the moment and will call back later'
      }
    ],
    entities: Array [
      Object {
        name: 'ContactName',
        description: 'The name of a contact or message recipient.',
        examples: 'Carol; Jim; Chris'
      },
      Object {
        name: 'EmailSubject',
        description: 'The text used as the subject line for an email.',
        examples: 'RE: interesting story'
      },
      Object {
        name: 'SenderName',
        description: 'The name of the sender.',
        examples: 'Patti Owens'
      },
      Object {
        name: 'Message',
        description: 'The message to send as an email or text.',
        examples: 'It was great meeting you today. See you again soon!'
      },
      Object {
        name: 'Category',
        description: 'The category of a message or email.',
        examples: 'Important; High priority'
      },
      Object {
        name: 'MessageType',
        description: 'The type of message to search for.',
        examples: 'Text; Email'
      },
      Object {
        name: 'OrderReference',
        description: '"The ordinal or relative position in a list, identifying an item to retrieve. For example, last or recent in What was the last message I sent?."',
        examples: 'Last; Recent'
      },
      Object {
        name: 'AudioDeviceType',
        description: '"Type of audio device (speaker, headset, microphone, etc)."',
        examples: 'Speaker; Hands-free; Bluetooth'
      },
      Object {
        name: 'ContactAttribute',
        description: 'The attribute of the contact the user inquires about.',
        examples: 'Birthdays; Address; Phone number'
      },
      Object {
        name: 'Line',
        description: 'The line the user wants to use to make a call or send a text/email from.',
        examples: 'Work line; British cell; Skype'
      }
    ]
  },
  Object {
    name: 'Entertainment',
    culture: 'en-us',
    description: 'The Entertainment domain provides intents and entities related to searching for movies, music, games and TV shows.',
    examples: 'Search the store for Halo; Search for Avatar; Look for Comedies',
    intents: Array [
      Object {
        name: 'Search',
        description: '"Search for movies, music, apps, games and TV shows."',
        examples: 'Search the store for Halo; search for Avatar'
      }
    ],
    entities: Array [
      Object {
        name: 'ContentRating',
        description: '"Media content rating like G, or R for movies."',
        examples: 'Kids video;PG rated'
      },
      Object {
        name: 'Genre',
        description: '"The genre of a movie, game, app or song."',
        examples: 'Comedies; Dramas; Funny'
      },
      Object {
        name: 'Language',
        description: '"The language of a movie, show, or music."',
        examples: 'French; English; Korean'
      },
      Object {
        name: 'Nationality',
        description: '"The country where a movie, show, or song was created."',
        examples: 'French; German; Korean'
      },
      Object {
        name: 'Person',
        description: '"The actor, director, producer, musician or artist associated with a movie, app, game or TV show."',
        examples: 'Madonna; Stanley Kubrick'
      },
      Object {
        name: 'Role',
        description: 'Role played by a person in the creation of media.',
        examples: 'Sings; Directed by; By'
      },
      Object {
        name: 'Title',
        description: '"The name of a movie, app, game, TV show, or song."',
        examples: 'Friends; Minecraft'
      },
      Object {
        name: 'Type',
        description: '"The type or media format of a movie, app, game, TV show, or song."',
        examples: 'Music; Movie; TV shows'
      },
      Object {
        name: 'UserRating',
        description: 'User user star or thumbs rating.',
        examples: '5 stars; 3 stars;  4 stars'
      },
      Object {
        name: 'Keyword',
        description: 'A generic search keyword specifying an attribute the doesn\'t exist in the more specific media slots.',
        examples: 'Soundtracks; Moon River; Amelia Earhart'
      },
      Object {
        name: 'MediaSource',
        description: 'Mentions of the store/marketplace.',
        examples: 'Halo; Netflix; Prime'
      },
      Object {
        name: 'MediaSubTypes',
        description: 'Media types smaller than movies and games.',
        examples: 'Demos; Dlc; Trailers'
      },
      Object {
        name: 'MediaFormat',
        description: 'The additional special technical type in which the media is formatted.',
        examples: 'HD movies; 3D movies; Downloadable'
      }
    ]
  },
  Object {
    name: 'Events',
    culture: 'en-us',
    description: 'The Events domain provides intents and entities related to booking tickets for events like concerts, festivals, sports games and comedy shows.',
    examples: 'I\'d like to buy a ticket for the symphony this weekend; Get tickets for Shakespeare in the Park; Cancel my ticket order',
    intents: Array [
      Object {
        name: 'Book',
        description: 'Purchase tickets to an event.',
        examples: 'I\'d like to buy a ticket for the symphony this weekend.'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'Event location or address.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'Name',
        description: 'The name of an event.',
        examples: 'Shakespeare in the Park'
      },
      Object {
        name: 'Type',
        description: 'The type of an event.',
        examples: 'Concert; Sports game'
      },
      Object {
        name: 'PlaceName',
        description: 'The event location name.',
        examples: 'Louvre; Opera House; Broadway'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of the location the event will be held in.',
        examples: 'Cafe; Theatre; Library'
      }
    ]
  },
  Object {
    name: 'Fitness',
    culture: 'en-us',
    description: 'The Fitness domain provides intents and entities related to tracking fitness activities. The intents include saving notes, remaining time or distance, or saving activity results.',
    examples: 'The difficulty of this run was 6/10; How much time till the next lap?;  Log my Saturday morning walk',
    intents: Array [
      Object {
        name: 'AddNote',
        description: 'Adds supplemental notes to a tracked activity.',
        examples: 'The difficulty of this run was 6/10; The terrain I am on running on is asphalt; I am using a 3 speed bike'
      },
      Object {
        name: 'GetRemaining',
        description: 'Gets the remaining time or distance for an activity.',
        examples: 'How much time till the next lap?; How many miles are remaining in my run? How much time for the split?'
      },
      Object {
        name: 'LogActivity',
        description: 'Save or log completed activity results.',
        examples: 'Save my last run; Log my Saturday morning walk; store my previous swim'
      },
      Object {
        name: 'LogWeight',
        description: 'Save or log the user\'s current weight.',
        examples: 'Save my current weight; log my weight now; store my current body weight'
      }
    ],
    entities: Array [
      Object {
        name: 'ActivityType',
        description: 'The type of activity to track.',
        examples: 'Run; Walk; Swim; Cycle'
      },
      Object {
        name: 'Food',
        description: 'A type of food to track in a fitness app.',
        examples: 'Banana; Salmon; Protein Shake'
      },
      Object {
        name: 'MealType',
        description: 'The meal type to track in a health or fitness app.',
        examples: 'Breakfast; Dinner; Lunch; Supper'
      },
      Object {
        name: 'Measurement',
        description: '"A type of measurements for time, distance or weight, for use in a fitness or health app."',
        examples: 'Kilometers; Miles; Minutes; Kilograms'
      },
      Object {
        name: 'Number',
        description: 'A numeric quantity for use in a fitness or health app.',
        examples: '19; three; 200; one'
      },
      Object {
        name: 'StatType',
        description: '"A statistic type on aggregated data, for use in a fitness or health app. For example, sum, average, maximum, minimum."',
        examples: 'Sum; Average; Maximum; Minimum'
      }
    ]
  },
  Object {
    name: 'Gaming',
    culture: 'en-us',
    description: 'The Gaming domain provides intents and entities related to managing a game party in a multiplayer game.',
    examples: 'Join my clan;  I\'m leaving this party for another; should we start a clan tonight',
    intents: Array [
      Object {
        name: 'InviteParty',
        description: 'Invite a contact to join a gaming party.',
        examples: 'Invite this player to my party; Come to my party; Join my clan'
      },
      Object {
        name: 'LeaveParty',
        description: 'Leave a gaming party in a multiplayer game.',
        examples: 'I\'m out; I\'m leaving this party for another; I am quitting'
      },
      Object {
        name: 'StartParty',
        description: 'Start a gaming party in a multiplayer game.',
        examples: 'Dude let\'s start a party; start a party; should we start a clan tonight'
      }
    ],
    entities: Array [
      Object {
        name: 'Contact',
        description: 'A contact name to use in a multiplayer game.',
        examples: 'Carol; Jim; Chris'
      }
    ]
  },
  Object {
    name: 'HomeAutomation',
    culture: 'en-us',
    description: 'The Home Automation domain provides intents and entities related to controlling smart home devices like lights and appliances.',
    examples: 'Turn off the lights; Turn on my coffee maker; Close garage door',
    intents: Array [
      Object {
        name: 'TurnOff',
        description: '"Turn off, close, or unlock a device."',
        examples: 'Turn off the lights; Stop the coffee maker; Close garage door'
      },
      Object {
        name: 'TurnOn',
        description: 'Turn on a device or set the device to a particular setting or mode.',
        examples: 'turn on my coffee maker;  can you turn on my coffee maker?;  Set the thermostat to 72 degrees.'
      }
    ],
    entities: Array [
      Object {
        name: 'Device',
        description: 'A type of device that can be turned on or off .',
        examples: 'coffee maker; thermostat; lights'
      },
      Object {
        name: 'Room',
        description: 'The location or room the device is in.',
        examples: 'living room; bedroom; kitchen'
      },
      Object {
        name: 'Operation',
        description: 'The current state of the device.',
        examples: 'lock; open; on; off'
      }
    ]
  },
  Object {
    name: 'MovieTickets',
    culture: 'en-us',
    description: 'The Movie Tickets domain provides intents and entities related to booking tickets to movies at a movie theater.',
    examples: 'Book me two tickets for Captain Omar and the two Musketeers; Cancel tickets; When is Captain Omar showing?',
    intents: Array [
      Object {
        name: 'Book',
        description: 'Purchase movie tickets.',
        examples: 'Book me two tickets for Captain Omar and the two musketeers; I want to buy a ticket for tomorrow\'s movie; I want a ticket for Captian Omar Part 2 next Wednesday'
      },
      Object {
        name: 'GetShowTime',
        description: 'Get the showtime of a movie.',
        examples: 'When is Captain Omar showing?'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'The address of a movie theater.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'MovieTitle',
        description: 'The title of a movie.',
        examples: 'Life of Pi;Hunger Games;Inception'
      },
      Object {
        name: 'PlaceName',
        description: 'The name of a movie theater or cinema.',
        examples: 'Cinema Amir; Alexandria Theatre; New York Theater'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of location a movie is showing at.',
        examples: 'cinema; theater; IMAX cinema'
      }
    ]
  },
  Object {
    name: 'Music',
    culture: 'en-us',
    description: 'The Music domain provides intents and entities related to playing music on a music player.',
    examples: 'play Kevin Durant; Increase track volume; Skip to the next song',
    intents: Array [
      Object {
        name: 'DecreaseVolume',
        description: 'Decrease the device volume.',
        examples: 'increase track volume; volume up'
      },
      Object {
        name: 'IncreaseVolume',
        description: 'Increase the device volume.',
        examples: 'decrease track volume; volume down'
      },
      Object {
        name: 'PlayMusic',
        description: 'Play music on a device.',
        examples: 'play Kevin Durant; play Paradise by Coldplay; play Hello by Adele'
      },
      Object {
        name: 'SkipBack',
        description: 'Skip backwards a track.',
        examples: 'Skip to the next song; Play the next song'
      },
      Object {
        name: 'SkipForward',
        description: 'Skip forward a track.',
        examples: 'Play the previous song; Go back to the previous track'
      },
      Object {
        name: 'Stop',
        description: 'Stop an action relating to music playback.',
        examples: 'Stop playing this album'
      },
      Object {
        name: 'Unmute',
        description: 'Unmute a music playback device.',
        examples: 'Unmute.'
      },
      Object {
        name: 'Mute',
        description: 'Mute the playing music.',
        examples: 'Mute song; Put the track on mute; Mute music'
      },
      Object {
        name: 'Pause',
        description: 'Pause the playing music.',
        examples: 'Pause; Pause music; Pause track'
      },
      Object {
        name: 'Repeat',
        description: 'Repeat the playing music.',
        examples: 'Repeat song; Play the track gain; Repeat music'
      },
      Object {
        name: 'Resume',
        description: 'Resume the playing music.',
        examples: 'Resume song; Start music again; Unpause'
      }
    ],
    entities: Array [
      Object {
        name: 'ArtistName',
        description: '"The actor, director, producer, writer, musician or artist associated with media to play on a device."',
        examples: 'Elvis Presley; Taylor Swift; Adele; Mozart'
      },
      Object {
        name: 'Genre',
        description: 'The genre of the music being requested.',
        examples: 'Country music; Broadway classics; Play my classical music from the Baroque period'
      }
    ]
  },
  Object {
    name: 'Note',
    culture: 'en-us',
    description: 'The Note domain provides intents and entities related to finding, editing and creating notes.',
    examples: 'Add to my groceries note lettuce tomato bread coffee; Check off bananas from my grocery list; Remove all items from my vacation list',
    intents: Array [
      Object {
        name: 'AddToNote',
        description: 'Add information to a note.',
        examples: 'Add to my groceries note lettuce tomato bread coffee;  Add to my todo list; add cupcakes to my Wunderlist'
      },
      Object {
        name: 'CheckOffItem',
        description: 'Check off items from a pre-existing note.',
        examples: 'Check off bananas from my grocery list;  Mark cheese cake on my holiday shopping list as done'
      },
      Object {
        name: 'Clear',
        description: 'Clear all items from a pre-existing note.',
        examples: 'Remove all items from my vacation list; Clear all from my reading list'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action relating to a note.',
        examples: 'It\'s okay by me;yes;I am confirming keeping all items on lists'
      },
      Object {
        name: 'Create',
        description: 'Create a new note.',
        examples: 'Create a list;  Note to remind me that Jason is in town first week of May'
      },
      Object {
        name: 'Delete',
        description: 'Delete an entire note.',
        examples: 'Delete my vacation list; delete my groceries note'
      },
      Object {
        name: 'DeleteNoteItem',
        description: 'Delete items from a pre-existing note.',
        examples: 'Delete chips from my grocery list; Remove pens from my school shopping list'
      },
      Object {
        name: 'ReadAloud',
        description: 'Read a list out loud',
        examples: 'Read me the first one;  Read me the details'
      },
      Object {
        name: 'ShowNext',
        description: 'See the next item in a list of notes.',
        examples: 'Show the next one; Next page; Next'
      }
    ],
    entities: Array [
      Object {
        name: 'AppName',
        description: 'The note-taking application name.',
        examples: 'Wunderlist; OneNote'
      },
      Object {
        name: 'ContactName',
        description: 'The name of a contact in a note.',
        examples: 'Carol; Jim; Chris'
      },
      Object {
        name: 'Text',
        description: 'The text of a note or reminder.',
        examples: 'stretch before walking; long run tomorrow'
      },
      Object {
        name: 'Title',
        description: 'Title of a note.',
        examples: 'groceries; people to call; to-do'
      },
      Object {
        name: 'DataSource',
        description: 'Location of notes.',
        examples: 'OneDrive; Google docs; my computer'
      },
      Object {
        name: 'DataType',
        description: 'The type of file or document, usually associated with particular software programs.',
        examples: 'Slides; Spreadsheet; Worksheet'
      }
    ]
  },
  Object {
    name: 'OnDevice',
    culture: 'en-us',
    description: 'The OnDevice domain provides intents and entities related to controlling the  devices.',
    examples: 'Close video player; Cancel playback; Can you make the screen brighter?',
    intents: Array [
      Object {
        name: 'AreYouListening',
        description: 'Ask if the device is listening.',
        examples: 'is this on?; are you listening?'
      },
      Object {
        name: 'CloseApplication',
        description: 'Close the device application.',
        examples: 'close video player'
      },
      Object {
        name: 'FileBug',
        description: 'File a bug on the device.',
        examples: 'file a bug please;Can you file a bug for me ?;Let me report this bug'
      },
      Object {
        name: 'GoBack',
        description: 'Ask to go back one step or return to the previous step.',
        examples: 'Go back please;Go to previous screen;Go back stop listening'
      },
      Object {
        name: 'Help',
        description: 'Request help.',
        examples: 'Help please;Hello; What can you do?;I need help'
      },
      Object {
        name: 'LocateDevice',
        description: 'Locate the device.',
        examples: 'Can you locate my phone;Find tom\'s iphone;Find my phone'
      },
      Object {
        name: 'LogIn',
        description: 'Log in to a service using the device.',
        examples: 'Login please;Facebook log in;Log into LinkedIn'
      },
      Object {
        name: 'LogOut',
        description: 'Log out of a service using the device.',
        examples: 'Log off my phone;Log on to twitter;Log out'
      },
      Object {
        name: 'MainMenu',
        description: 'View the main menu of a device.',
        examples: 'View menu.'
      },
      Object {
        name: 'OpenApplication',
        description: 'Open an application on the device.',
        examples: 'Open the alarm please;Turn on camera;Launch calendar'
      },
      Object {
        name: 'OpenSetting',
        description: 'Open a setting on the device.',
        examples: 'Open network settings.'
      },
      Object {
        name: 'PairDevice',
        description: 'Pair the device.',
        examples: 'Can you help me in pairing Bluetooth signal to phone;Turn the bluetooth on and pair it with laptop;Pair Bluetooth signal to my laptop'
      },
      Object {
        name: 'PowerOff',
        description: 'Turn off the device.',
        examples: 'Can you shut down my computer;Shutdown;Turn off my mobile'
      },
      Object {
        name: 'QueryBattery',
        description: 'Get information about battery life.',
        examples: 'Show me battery life.'
      },
      Object {
        name: 'QueryWifi',
        description: 'Get information about WiFi.',
        examples: 'What\'s my battery status;How much battery left now?;Show me battery'
      },
      Object {
        name: 'Restart',
        description: 'Restart the device.',
        examples: 'Please restart.'
      },
      Object {
        name: 'RingDevice',
        description: '"Ask the device to ring, in order to find it when it\'s lost."',
        examples: 'Ring my phone.'
      },
      Object {
        name: 'SetBrightness',
        description: 'Set the device brightness.',
        examples: 'Set brightness to medium;Set brightness to high;Set brightness to low'
      },
      Object {
        name: 'SetupDevice',
        description: 'Initiate device setup.',
        examples: 'I want to install OS setup;Setup please;Do setup for me'
      },
      Object {
        name: 'ShowAppBar',
        description: 'Show an app bar.',
        examples: 'Show me the application bar;Application bar please;Let me see the application bar'
      },
      Object {
        name: 'ShowContextMenu',
        description: 'Show a context menu.',
        examples: 'Let me see the context menu;Context menu please;Can you show me the context menu'
      },
      Object {
        name: 'Sleep',
        description: 'Put the device to sleep.',
        examples: 'Go to sleep;Sleep;My computer sleep'
      },
      Object {
        name: 'SwitchApplication',
        description: 'Switch the application to use on the device.',
        examples: 'Switch to my media player.'
      },
      Object {
        name: 'TurnDownBrightness',
        description: 'Turn down device brightness.',
        examples: 'Dim the screen.'
      },
      Object {
        name: 'TurnOffSetting',
        description: 'Turn off a device setting.',
        examples: 'Deactivate Bluetooth;Disable data;Disconnect bluetooth'
      },
      Object {
        name: 'TurnOnSetting',
        description: 'Turn on a device setting.',
        examples: 'On;Off'
      },
      Object {
        name: 'TurnUpBrightness',
        description: 'Turn up device brightness.',
        examples: 'Can you make the screen brighter?'
      }
    ],
    entities: Array [
      Object {
        name: 'AppName',
        description: 'Name of an application on the device.',
        examples: 'SoundCloud; YouTube'
      },
      Object {
        name: 'BrightnessLevel',
        description: 'Set the brightness level on the device.',
        examples: 'One hundred percent;Fifty;40%'
      },
      Object {
        name: 'ContactName',
        description: 'The name of a contact on the device.',
        examples: 'Paul;Marlen Max'
      },
      Object {
        name: 'DeviceType',
        description: 'The type of device.',
        examples: 'Phone;kindle;Laptop'
      },
      Object {
        name: 'MediaType',
        description: 'The media type handled by the device.',
        examples: 'Music; Movie; TV shows'
      },
      Object {
        name: 'SettingType',
        description: 'A type of setting or settings panel that the user wants to edit.',
        examples: 'WiFi; Wireless Network;  Color Scheme; Notification [Center]'
      }
    ]
  },
  Object {
    name: 'Places',
    culture: 'en-us',
    description: 'The Places domain provides intents for handling queries related to places like businesses, institution, restaurants, public spaces and addresses.',
    examples: 'Save this location to my favorites; How far away is Holiday Inn?; At what time does Safeway close?',
    intents: Array [
      Object {
        name: 'AddFavoritePlace',
        description: 'Add a location to the the user\'s favorites list.',
        examples: 'Save this location to my favorites; Add this address to my favorites'
      },
      Object {
        name: 'CheckAccident',
        description: 'Ask whether there is an accident on a specified road.',
        examples: 'Is there an accident on 880?; Show me accident information'
      },
      Object {
        name: 'CheckAreaTraffic',
        description: '"Check the traffic for a general area or highway, not on a specified route."',
        examples: 'Traffic in Seattle;  What\'s the traffic like in Seattle?'
      },
      Object {
        name: 'CheckIntoPlace',
        description: 'Check in to a place using social media.',
        examples: 'Check me in on Foursquare; Check in here'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action relating to a place.',
        examples: 'Confirm my restaurant reservation.'
      },
      Object {
        name: 'Exit',
        description: 'Action to exit a task relating to a place.',
        examples: 'Quit please;Quit giving me directions'
      },
      Object {
        name: 'FindPlace',
        description: '"Search for a place (business, institution, restaurant, public space, address)."',
        examples: 'Where\'s the nearest library?; Find me a good Italian restaurant in Mountain View'
      },
      Object {
        name: 'GetAddress',
        description: 'Ask for the address of a place.',
        examples: 'Show me the address of Guu on Robson street;  What is the address of the nearest Starbucks?'
      },
      Object {
        name: 'GetDistance',
        description: 'Ask about distance to a specific place.',
        examples: 'How far away is Holiday Inn?;  how far is it to Bellevue square from here;  what\'s the distance to Tahoe'
      },
      Object {
        name: 'GetHours',
        description: 'Ask about the operating hours for a place.',
        examples: 'At what time does Safeway close?;  What are the hours for Home Depot?;  Is Starbucks still open?'
      },
      Object {
        name: 'GetMenu',
        description: 'Ask for the menu items for a restaurant.',
        examples: 'Does Zucca serve anything vegan?;  What\'s on the menu at Sizzler;  Show me Applebee\'s menu'
      },
      Object {
        name: 'GetPhoneNumber',
        description: 'Ask for the phone number of a place.',
        examples: 'What is the phone number of the nearest Starbucks?; Give the number for Home Depot'
      },
      Object {
        name: 'GetReviews',
        description: 'Ask for reviews of a place.',
        examples: 'Show me reviews for Cheesecase Factory; Read Cineplex reviews in Yelp'
      },
      Object {
        name: 'GetRoute',
        description: 'Ask for directions to a place.',
        examples: 'How to walk to Bellevue square;  Show me the shortest way to 8th and 59th from here; Get me directions to Mountain View CA'
      },
      Object {
        name: 'GetStarRating',
        description: 'Ask for the star rating of a place.',
        examples: 'How is Zucca rated according to Yelp?;  How many stars does the French Laundry have?;  Is the aquarium in Monterrey good?'
      },
      Object {
        name: 'GetTransportationSchedule',
        description: 'Get the bus schedule for a place.',
        examples: 'What time is the next bus to downtown?;  Show me the buses in King County'
      },
      Object {
        name: 'GetTravelTime',
        description: 'Ask  for the travel time to a specified destination.',
        examples: 'How long will it take to get to San Francisco from here;  What\'s the driving time to Denver from SF'
      },
      Object {
        name: 'MakeCall',
        description: 'Make a phone call to a place.',
        examples: 'Call mom;  I would like to place a Skype call to Anna; Call Jim'
      },
      Object {
        name: 'MakeReservation',
        description: 'Request a reservation for a restaurant or other business.',
        examples: 'Reserve at Zucca for two for tonight;  Book a table for tomorrow; Table for 3 in Palo Alto at 8'
      },
      Object {
        name: 'MapQuestions',
        description: 'Request information about directions or whether a specified road goes to a destination.',
        examples: 'Does 13 pass through downtown?; Can I take 880 to Oakland?'
      },
      Object {
        name: 'Rating',
        description: 'Get the rating description of a restaurant or place.',
        examples: 'How many stars does the Contoso Inn have?'
      },
      Object {
        name: 'ReadAloud',
        description: 'Read a list of places out loud.',
        examples: 'Read me the first one;  Read me the details'
      },
      Object {
        name: 'SelectItem',
        description: 'Choose an item from a list of choices relating to a place or places.',
        examples: 'Pick the second one; Select the first'
      },
      Object {
        name: 'ShowMap',
        description: 'Show a map of an area.',
        examples: 'Show a map for the second one ; Show map; Find San Francisco on the map'
      },
      Object {
        name: 'ShowNext',
        description: 'Show the next item in a series.',
        examples: 'Show the next one; go to the next page'
      },
      Object {
        name: 'ShowPrevious',
        description: 'Show the previous item in a series.',
        examples: 'show previous one; previous; go to previous'
      },
      Object {
        name: 'StartOver',
        description: 'Restart the app or start a new session.',
        examples: 'Start over;  New session; restart'
      },
      Object {
        name: 'TakesReservations',
        description: 'Ask whether a place accepts reservations.',
        examples: 'Does the art gallery accept reservations; Is it possible to make a reservation at the Olive Garden'
      },
      Object {
        name: 'CheckRouteTraffic',
        description: 'Check the traffic of a specific route specified by the user.',
        examples: 'How is the traffic to Mashiko?; Show me the traffice to Kirkland; How is the traffic to Seattle?'
      },
      Object {
        name: 'GetPriceRange',
        description: 'User asks for the price range of a place.',
        examples: 'Is Zucca cheap?; Is the Cineplex half price on Wednesdays?; How much does a whole lobster dinner cost at Sizzler?'
      }
    ],
    entities: Array [
      Object {
        name: 'AbsoluteLocation',
        description: 'The location or address of a place.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationAddress',
        description: 'A destination location or address.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationPlaceName',
        description: '"The name of a destination that is a business, restaurant, public attraction, or institution. "',
        examples: 'central park; safeway; walmart'
      },
      Object {
        name: 'DestinationPlaceType',
        description: '"The type of a destination that is a business, restaurant, public attraction, or institution. "',
        examples: 'Cafe; Theatre; Library'
      },
      Object {
        name: 'MealType',
        description: 'Type of meal like breakfast or lunch.',
        examples: 'breakfast; dinner; lunch; supper'
      },
      Object {
        name: 'OpenStatus',
        description: 'Indicates whether a place is open or closed.',
        examples: 'Open; closed; opening'
      },
      Object {
        name: 'PlaceName',
        description: 'The name of a place.',
        examples: 'Cheesecake Factory;'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of a place.',
        examples: 'Cafe; Theatre; Library'
      },
      Object {
        name: 'TransportationCompany',
        description: 'The name of a public transport provider.',
        examples: 'Amtrack;  Acela; Greyhound'
      },
      Object {
        name: 'TransportationType',
        description: 'A type of transportation.',
        examples: 'Bus; Train; Driving'
      },
      Object {
        name: 'Amenities',
        description: 'The objective characteristics/benefits of a place.',
        examples: 'kids eat free; waterfront; free parking'
      },
      Object {
        name: 'Atmosphere',
        description: 'The atmosphere of a place.',
        examples: 'kid-friendly; casual restaurant; sporty'
      },
      Object {
        name: 'RouteAvoidanceCriteria',
        description: '"Criteria for avoiding specific routes like avoiding accidents, constructions or tolls."',
        examples: 'Tolls; Constructions; Route 11'
      },
      Object {
        name: 'Cuisine',
        description: 'The cuisine of a place.',
        examples: 'Mediterranean; Italian; Indian'
      },
      Object {
        name: 'Distance',
        description: 'The distance to a place.',
        examples: '15 miles; 5 miles; 10 miles away'
      },
      Object {
        name: 'PreferredRoute',
        description: 'The preferred route specified by the user.',
        examples: '101; 202; Route 401'
      },
      Object {
        name: 'Product',
        description: 'The product offered by a place.',
        examples: 'Clothes; Digital ASR Cameras; Fresh fish'
      },
      Object {
        name: 'PublicTransportationRoute',
        description: 'The name of the public transportation route that the user is searching for.',
        examples: 'Northeast corridor train; Bus route 3X'
      },
      Object {
        name: 'Rating',
        description: 'The rating of a place.',
        examples: '5 stars; 3 stars;  4 stars'
      },
      Object {
        name: 'ServiceProvided',
        description: '"This is the service provided by a business or place such as haircut, snow plowing, landscaping."',
        examples: 'haircut; mechanic; plumber'
      }
    ]
  },
  Object {
    name: 'Reminder',
    culture: 'en-us',
    description: 'The reminder domain provides intents and entities for creating, editing, and finding reminders.',
    examples: 'Change my interview to 9 am tomorrow; Remind me to buy milk on my way back home; Can you check if I have a reminder about Christine\'s birthday?',
    intents: Array [
      Object {
        name: 'Change',
        description: 'Change a reminder.',
        examples: 'Change my interview to 9 am tomorrow ; Move my assignment reminder to tomorrow'
      },
      Object {
        name: 'Create',
        description: 'Create a new reminder.',
        examples: 'Create a reminder; Remind me to buy milk;  I want to remember to call Rebecca when I\'m at home'
      },
      Object {
        name: 'Delete',
        description: 'Delete a reminder.',
        examples: 'Delete my picture reminder; Delete this reminder'
      },
      Object {
        name: 'Find',
        description: 'Find a reminder.',
        examples: 'Do I have a reminder about my anniversary?; Can you check if I have a reminder about Christine\'s birthday?'
      }
    ],
    entities: Array [
      Object {
        name: 'Text',
        description: 'The text description of a reminder.',
        examples: 'pick up dry cleaning; dropping my car off at the service center'
      }
    ]
  },
  Object {
    name: 'RestaurantReservation',
    culture: 'en-us',
    description: 'The Reservation domain provides intents and entities related to managing restaurant reservations.',
    examples: 'Reserve at Zucca for two for tonight; Book a table at BJ\'s for tomorrow;  Table for 3 in Palo Alto at 7',
    intents: Array [
      Object {
        name: 'Reserve',
        description: 'Request a reservation for a restaurant.',
        examples: 'Reserve at Zucca for two for tonight;  Book a table for tomorrow; Table for 3 in Palo Alto at 7'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'An event location or address for a reservation.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'Amenities',
        description: 'An attribute describing the amenities of a place.',
        examples: 'ocean view;  non smoking;'
      },
      Object {
        name: 'AppName',
        description: 'The name of an application for making reservations.',
        examples: 'OpenTable; Yelp; TripAdvisor'
      },
      Object {
        name: 'Atmosphere',
        description: 'A description of the atmosphere of a restaurant or other place.',
        examples: 'romantic; casual; good for groups'
      },
      Object {
        name: 'Cuisine',
        description: '"A type of food, cuisine or cuisine nationality."',
        examples: 'Chinese; Italian; Mexican'
      },
      Object {
        name: 'MealType',
        description: 'A meal type associated with a reservation.',
        examples: 'breakfast; dinner; lunch; supper'
      },
      Object {
        name: 'PlaceName',
        description: '"The name of a local business, restaurant, public attraction, or institution. "',
        examples: 'IHOP; Cheesecake Factory; Louvre'
      },
      Object {
        name: 'PlaceType',
        description: '"The type of a local business, restaurant, public attraction, or institution. "',
        examples: 'restaurant; opera; cinema'
      },
      Object {
        name: 'Rating',
        description: 'The rating of a place or restaurant.',
        examples: '5 stars; 3 stars;  4 stars'
      }
    ]
  },
  Object {
    name: 'Taxi',
    culture: 'en-us',
    description: 'The Taxi domain provides intents and entities for creating and managing taxi bookings.',
    examples: 'Get me a cab at 3 pm; How much longer do I have to wait for my taxi?; Cancel my Uber',
    intents: Array [
      Object {
        name: 'Book',
        description: 'Call a taxi.',
        examples: 'Get me a cab; Find a taxi;  Book me an uber x'
      },
      Object {
        name: 'Cancel',
        description: 'Cancel an action relating to booking a taxi.',
        examples: 'Cancel my taxi; Cancel my Uber'
      },
      Object {
        name: 'Track',
        description: 'Track a taxi route.',
        examples: 'How much longer do I have to wait for my taxi?; Where is my Uber?'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'The address associated with booking a taxi.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationAddress',
        description: 'A destination location or address.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationPlaceName',
        description: '"The name of a destination that is a local business, restaurant, public attraction, or institution. "',
        examples: 'Central Park; Safeway; Walmart'
      },
      Object {
        name: 'DestinationPlaceType',
        description: '"The type of a destination that is a local business, restaurant, public attraction, or institution. "',
        examples: 'Restaurant; Opera; Cinema'
      },
      Object {
        name: 'PlaceName',
        description: '"Name of local business, restaurant, public attraction, or institution. "',
        examples: 'Central Park; Safeway; Walmart'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of place in a request to book a taxi.',
        examples: 'Restaurant; Opera; Cinema'
      },
      Object {
        name: 'TransportationCompany',
        description: 'The name of a transport provider.',
        examples: 'Amtrack;  Acela; Greyhound'
      },
      Object {
        name: 'TransportationType',
        description: 'The transportation type.',
        examples: 'Bus; Train; Driving'
      }
    ]
  },
  Object {
    name: 'Translate',
    culture: 'en-us',
    description: 'The Translate domain provides intents and entities related to translating text to a target language.',
    examples: 'Translate to French;  Translate hello to German; Translate this sentence to English',
    intents: Array [
      Object {
        name: 'Translate',
        description: 'Translate text to another language.',
        examples: 'Translate to French;  Translate hello to German'
      }
    ],
    entities: Array [
      Object {
        name: 'TargetLanguage',
        description: 'The target language of a translation.',
        examples: 'French; German; Korean'
      },
      Object {
        name: 'Text',
        description: 'The text to translate.',
        examples: 'Hello World;Good morning;Good evening'
      }
    ]
  },
  Object {
    name: 'TV',
    culture: 'en-us',
    description: 'The TV domain provides intents and entities for controlling TVs.',
    examples: 'Switch channel to BBC; Show TV guide; Watch National Geographic',
    intents: Array [
      Object {
        name: 'ChangeChannel',
        description: 'Change a channel on a TV.',
        examples: 'Change channel to CNN;  Switch channel to BBC; Go to channel 4'
      },
      Object {
        name: 'ShowGuide',
        description: 'Show the TV guide.',
        examples: 'Show TV guide; what is on movie channel now?; show my program list'
      },
      Object {
        name: 'WatchTV',
        description: 'Ask to watch a TV channel.',
        examples: 'I want to watch the Disney channel; go to TV please; Watch National Geographic'
      }
    ],
    entities: Array [
      Object {
        name: 'ChannelName',
        description: 'The name of a TV channel.',
        examples: 'CNN; BBC; Movie channel'
      }
    ]
  },
  Object {
    name: 'Utilities',
    culture: 'en-us',
    description: 'The Utilities domain provides intents for tasks that are common to many tasks, such as greetings, cancellation, confirmation, help, repetition, navigation, starting and stopping.',
    examples: 'Go back to Twitter; Please help; Repeat last question please',
    intents: Array [
      Object {
        name: 'Cancel',
        description: 'Cancel an action.',
        examples: 'Cancel the message; I don\'t want to send the email anymore'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action.',
        examples: 'Yeah ohh I confirm;Good I am confirming;Okay I am confirming'
      },
      Object {
        name: 'GoBack',
        description: 'Go back one step or return to a previous step.',
        examples: 'Go back to Twitter; Go back a step; Go back'
      },
      Object {
        name: 'Help',
        description: 'Request for help.',
        examples: 'Please help; open help; help'
      },
      Object {
        name: 'Repeat',
        description: 'Repeat an action.',
        examples: 'Repeat last question please; repeat last song'
      },
      Object {
        name: 'ShowNext',
        description: 'Show the next item in a series.',
        examples: 'Show the next one; go to the next page'
      },
      Object {
        name: 'ShowPrevious',
        description: 'Show the previous item in a series.',
        examples: 'show previous one'
      },
      Object {
        name: 'StartOver',
        description: 'Restart the app or start a new session.',
        examples: 'Start over;  New session; restart'
      },
      Object {
        name: 'Stop',
        description: 'Stop an action.',
        examples: 'Stop saying this please;Shut up;Stop please'
      },
      Object {
        name: 'FinishTask',
        description: 'Finish a task the user started.',
        examples: 'I am done; I am finished; It is done'
      }
    ],
    entities: Array []
  },
  Object {
    name: 'Weather',
    culture: 'en-us',
    description: 'The Weather domain provides intents and entities for getting weather reports and forecasts',
    examples: 'weather in London in september; What\'s the 10 day forecast?; What\'s the average temperature in India in september?',
    intents: Array [
      Object {
        name: 'GetCondition',
        description: 'Get historic facts related to weather.',
        examples: 'weather in London in september;  what\'s the average temperature in India in september'
      },
      Object {
        name: 'GetForecast',
        description: 'Get the current weather and forecast for the next few days.',
        examples: 'How is the weather today?; What\'s the 10 day forecast; How will the weather be this weekend'
      }
    ],
    entities: Array [
      Object {
        name: 'Location',
        description: 'The absolute location for a weather request.',
        examples: 'Seattle; Paris; Palo Alto'
      }
    ]
  },
  Object {
    name: 'Web',
    culture: 'en-us',
    description: 'The Web domain provides intents and entities for navigating to a website.',
    examples: 'Navigate to facebook.com; Go to www.twitter.com; Navigate to www.bing.com',
    intents: Array [
      Object {
        name: 'Navigate',
        description: 'A request to navigate to a specified website.',
        examples: 'Navigate to facebook.com; Go to www.twitter.com'
      }
    ],
    entities: Array []
  },
  Object {
    name: 'Shopping',
    culture: 'en-us',
    description: 'A model for finding specific items or categories of items. The user can find and shop from specific shops. The user can check what is in their shopping cart, or check the status of an order. The user can also purchase or reorder items.',
    examples: 'Show me silver necklaces; How much is the leather jacket; delete the red shoes from my shopping cart',
    intents: Array [
      Object {
        name: 'AddToCart',
        description: 'User wants to add an item to their cart',
        examples: 'add the gold earrings to the shopping list; Add it to the shopping cart; Add this item then checkout'
      },
      Object {
        name: 'BuyItem',
        description: 'User wants to buy a specific item',
        examples: 'purchase home alone dvd; can you buy this item; I want to purchase this one'
      },
      Object {
        name: 'CheckCart',
        description: 'User want to check their cart for items',
        examples: 'Did I add milk to my shopping cart; have I already added shoes to my shopping cart; is pepsi in my shopping cart ?'
      },
      Object {
        name: 'CheckOrderStatus',
        description: 'User wants to check the status of their order',
        examples: 'when will my order be shipped; How long until my shipment gets here ?; when will I get my order'
      },
      Object {
        name: 'FindItem',
        description: 'User is searching for an item from categories',
        examples: 'Help me find a box of instant rice; take me to kitchen item section of this website; Please show me whether or not this site has oranges'
      },
      Object {
        name: 'GetDetails',
        description: 'User wants details of a specific item, other than the price of the item',
        examples: 'show my orders; Show me my shipping information; Thanksgiving turkey prices'
      },
      Object {
        name: 'GetPrice',
        description: 'User wants to know the price of an item',
        examples: 'How much are these candles ?; Give me all makeup prices; cortana price for eggs at walmart and the coupon discount added'
      },
      Object {
        name: 'GetRecommendation',
        description: 'User wants to get a recommendation',
        examples: 'show me gift ideas for mothers; "My mother deserves a really nice gift for Christmas , help"; Can you pick me out something for my stepson ?'
      },
      Object {
        name: 'GetReviews',
        description: 'User wants to know the reviews of an item',
        examples: 'show me reviews for apples; Show me some reviews for this Samsung printer; Show me reviews for this LG blender'
      },
      Object {
        name: 'GetWarrantyInfo',
        description: 'User wants to get information on a warranty',
        examples: 'Search warranty expiration date; show warranty information; Tell me when my phones $20 warranty will expire please.'
      },
      Object {
        name: 'RemoveFromCart',
        description: 'User wants to remove an item from the cart',
        examples: 'Remove Campbell \'s chicken noodle soup from my cart; Remove the floor lamp from my cart; Please remove the Campbell \'s chicken noodle soup from my cart'
      },
      Object {
        name: 'Reorder',
        description: 'User wants to reorder an item',
        examples: 'Reorder the Tupperware I bought on this site last week; Reorder the same deodorant as last time; I would like to reorder Budweiser'
      },
      Object {
        name: 'SubmitWarranty',
        description: 'User wants to submit a new warranty on an item',
        examples: 'All of my warranties choose warranty for fish washer submit; submit microwave warranty; For this item submit the warranty'
      },
      Object {
        name: 'AddCard',
        description: 'User want to add a credit card to their profile',
        examples: 'add Visa to my payment methods; add American express to payment; add visa to payment'
      }
    ],
    entities: Array [
      Object {
        name: 'BrandName',
        description: 'The company/brand of an item',
        examples: 'Yardley; pepsi; legos'
      },
      Object {
        name: 'Category',
        description: 'The user is looking for items in a category',
        examples: 'kitchen; makeup; gift'
      },
      Object {
        name: 'CreditCardName',
        description: 'The name of the user\'s credit card',
        examples: 'Visa; American express; visa'
      },
      Object {
        name: 'Item',
        description: 'The user is looking for an item (doesn\'t have to be from a specific category)',
        examples: 'earrings; shirts; corn'
      },
      Object {
        name: 'OrderReference',
        description: '"Order ref returns one item based on a time ordering, such as the release date for a category of goods."',
        examples: 'currently; current; last'
      },
      Object {
        name: 'Price',
        description: 'The price range for the item requested. Includes words like cheap and expensive',
        examples: '$5; ten dollars; under $20'
      },
      Object {
        name: 'Quantity',
        description: 'Number of items. Quantity includes numerals',
        examples: 'multi pack; one can; one bar'
      },
      Object {
        name: 'Rating',
        description: '"This is the rating of an item (not the price range). The phrases good, best, and top also go here"',
        examples: 'top; best; highest'
      },
      Object {
        name: 'Recipient',
        description: 'The user is looking for an item for a gender or a person',
        examples: 'mothers; mother; stepson'
      },
      Object {
        name: 'Size',
        description: 'Sizing information of an item. Includes words',
        examples: 'xl; large; Largest'
      },
      Object {
        name: 'WarrantyAttribute',
        description: 'The user wants to know about a certain attribute in a warranty',
        examples: 'expiration date; expire; expiration'
      },
      Object {
        name: 'WarrantyCost',
        description: 'The cost of a warrenty the user wants to know about.',
        examples: '$20; $500; $100'
      }
    ]
  },
  Object {
    name: '日程',
    culture: 'zh-cn',
    description: '日程主题提供与日程规划相关的意图和实体，包括添加、删除和编辑日程待办事项，查询信息等意图。',
    examples: '在周日下午2点与莉莉约会;阿明什么时候有空参加会议;取消我上午九点的会议',
    intents: Array [
      Object {
        name: '添加日程',
        description: '增加一个新的日程事项',
        examples: '周日下午两点与莉莉约会;我想安排一个会议;我需要指定一个会议日程'
      },
      Object {
        name: '核查',
        description: '核查用户日程，寻找适宜的会议时间',
        examples: '阿明什么时候有空参加会议;查看罗琳明天什么时候有空;李斯周六有空吗？'
      },
      Object {
        name: '删除',
        description: '请求删除日程事项',
        examples: '取消我和罗琳的约会;删除我九点的会议日程'
      },
      Object {
        name: '编辑',
        description: '请求修改日程信息',
        examples: '将上午九点的会议改为十点;我想更新我的日程;重新安排我和卢斯的会议'
      },
      Object {
        name: '查询',
        description: '查询会议信息或日程安排',
        examples: '告诉我周末的日程安排;查询我牙齿复查的日程安排.'
      }
    ],
    entities: Array [
      Object {
        name: '地点',
        description: '日程事项的位置信息，包含城市、区域等地址信息',
        examples: '纳什维尔健身房209;897煎饼屋;车库'
      },
      Object { name: '主题', description: '会议的主题信息', examples: '牙齿复查日程;和朱莉吃午餐' }
    ]
  },
  Object {
    name: '通讯',
    culture: 'zh-cn',
    description: '通讯主题提供与电话、电子邮件和发送信息相关的意图和实体',
    examples: '转接到我的语音信箱;记录这个号码，将联系人保存为罗琳;请将我的电话转接到3333号码',
    intents: Array [
      Object {
        name: '添加联系人',
        description: '将新联系人添加到用户的联系人列表中',
        examples: '添加新联系人;保存此号码并将其命名为Carol'
      },
      Object {
        name: '添加更多信息',
        description: '添加更多的电子邮件或文本，作为逐步的电子邮件或文本构成的一部分',
        examples: '添加更多文字;添加更多到电子邮件正文'
      },
      Object { name: '回复', description: '接听电话', examples: '接电话;回复他' },
      Object {
        name: '编辑联系人姓名',
        description: '为联系人分配昵称',
        examples: '将何伟设置为爸爸;添加昵称卡罗尔·汉娜;编辑吉姆的昵称'
      },
      Object {
        name: '拨打语音信箱',
        description: '连接到用户的语音信箱',
        examples: '将我连接到我的语音信箱;致电语音信箱;语音信箱'
      },
      Object {
        name: '检查状态',
        description: '在Skype中检查联系人的状态',
        examples: '吉姆的在线状态是否脱离了？;卡罗尔可以聊天吗？'
      },
      Object {
        name: '确认',
        description: '确认指令',
        examples: '是;好的;好吧;我确认我要发送这封电子邮件。'
      },
      Object {
        name: '寻找联系人',
        description: '按名称查找联系人信息',
        examples: '查找卡罗尔的号码;告诉我卡罗的号码'
      },
      Object {
        name: '关闭呼叫转移',
        description: '关闭呼叫转移',
        examples: '停止转发我的电话;关闭呼叫转移'
      },
      Object {
        name: '开启呼叫转移',
        description: '打开呼叫转移',
        examples: '转发我的电话3333;切换呼叫转移到3333'
      },
      Object {
        name: '呼叫转接状态',
        description: '呼叫转移的状态',
        examples: '是我的呼叫转移了吗？;告诉我通话状态是开或关 '
      },
      Object { name: '回退', description: '返回前一步', examples: '回到必应搜索;回头一步;回去' },
      Object { name: '忽略', description: '忽略来电', examples: '不要接听;忽略呼叫' },
      Object {
        name: '忽略并回复',
        description: '忽略来电和文本代替回答',
        examples: '不要回答电话而是发送消息;忽略发送回来 '
      },
      Object { name: '打电话', description: '打电话', examples: '打电话给吉姆;请拨311。 ' },
      Object { name: '按键', description: '按键盘上的按钮或数', examples: '拨星号;按1 2 3 ' },
      Object {
        name: '朗读',
        description: '阅读邮件或电子邮件给用户',
        examples: '阅读文本;她说什么的消息'
      },
      Object { name: '重拨', description: '重拨或拨打一个号码', examples: '重拨;重拨我的最后一次通话' },
      Object {
        name: '发送电子邮件',
        description: '发送电子邮件。本文适用于邮件而不是短信',
        examples: '电子邮件给麦克麦克晚餐上周精彩;发送一封电子邮件给鲍勃'
      },
      Object { name: '发送信息', description: '发送短信或即时消息', examples: '发送文本给克里斯和凯罗尔' },
      Object {
        name: '设置快速拨号',
        description: '联系人的电话号码设置快速拨号快捷方式',
        examples: '设置快速拨号给卡罗尔;妈妈设置快速拨号'
      },
      Object {
        name: '显示下一项',
        description: '看下一个项目，例如，在一个列表中的短信或邮件',
        examples: '显示下一个;进入下一页'
      },
      Object {
        name: '显示上一项',
        description: '看到以前的项目，例如，在一个列表中的短信或邮件',
        examples: '显示前一个;以前的;去之前'
      },
      Object { name: '关闭扬声器', description: '关掉扬声器电话', examples: '关闭免提;关掉扬声器' },
      Object { name: '开启扬声器', description: '打开扬声器电话', examples: '免提模式;放扬声器' },
      Object {
        name: '查询快速拨号',
        description: '查询快速拨号',
        examples: '我的电话号码是多少?;我有速拨盘吗?;941 - 5555 - 333的拨号数是多少?'
      },
      Object {
        name: '拒接',
        description: '拒绝一个来电',
        examples: '拒绝呼叫;不能回答现在;不是此刻和以后会回电话'
      }
    ],
    entities: Array [
      Object {
        name: '联系人姓名',
        description: '一个联系人或邮件收件人。',
        examples: '卡罗尔;吉姆;克里斯'
      },
      Object {
        name: '邮件主题',
        description: '文本作为一个电子邮件的主题行',
        examples: '回复： 有趣的故事'
      },
      Object {
        name: '信息内容',
        description: '消息发送电子邮件或文本',
        examples: '今天很高兴见到你。很快再见到你！'
      },
      Object { name: '类别', description: '消息或邮件类别', examples: '重要;高优先级' },
      Object { name: '信息种类', description: '信息搜索的类型', examples: '文本;电子邮件' },
      Object {
        name: '参照位置',
        description: '序号或相关列表中的位置，确定一个项目检索。例如，在我发的最后一条消息是什么最后或最近的？',
        examples: '上一个;最近的'
      },
      Object {
        name: '音频设备种类',
        description: '音频设备(扬声器，耳机，麦克风等',
        examples: '耳机;免提;蓝牙'
      },
      Object { name: '联系人属性', description: '用户查询的联系的属性', examples: '生日;地址;电话号码' },
      Object {
        name: '线路',
        description: '用户想使用打电话或发短信/电子邮件从线路',
        examples: '工作线;英国线;Skype '
      }
    ]
  },
  Object {
    name: '智能家居',
    culture: 'zh-cn',
    description: '智能家居主题提供控制灯光、家电等智能家居装置相关的意图和实体',
    examples: '关闭灯光;把咖啡机打开;关闭车库门',
    intents: Array [
      Object {
        name: '关闭',
        description: '关闭、关闭或解锁设备',
        examples: '关灯;停止咖啡壶;关闭车库门'
      },
      Object {
        name: '打开',
        description: '打开设备或将设备设置为特定的设置或模式',
        examples: '打开我的咖啡壶;你能打开我的咖啡壶吗?将恒温器设置为72度'
      }
    ],
    entities: Array [
      Object { name: '装置', description: '可以打开或关闭的一种设备', examples: '咖啡壶;恒温器;灯' },
      Object { name: '地点', description: '设备所在的位置或房间', examples: '客厅;卧室;厨房' },
      Object { name: '操作', description: '设备的当前状态', examples: '锁;开放;关' }
    ]
  },
  Object {
    name: '音乐',
    culture: 'zh-cn',
    description: '音乐主题提供与音乐播放相关的主题和实体',
    examples: '播放周杰伦的歌;增加音量;下一首音乐',
    intents: Array [
      Object { name: '减少音量', description: '减少音量', examples: '减少轨道音量;音量 ' },
      Object { name: '增加音量', description: '增加音量', examples: '增加轨道音量;音量 ' },
      Object {
        name: '播放音乐',
        description: '在设备上播放音乐',
        examples: '播放凯文杜兰特;播放游玩曲;播放阿黛勒的hello '
      },
      Object { name: '下一首', description: '跳过一个磁道', examples: '跳到下一首歌曲;播放下一首歌曲' },
      Object { name: '上一首', description: '跳过轨道 ', examples: '播放上一首歌曲;回到以前的轨道' },
      Object { name: '停止', description: '停止有关音乐的播放动作', examples: '停止播放这张专辑' },
      Object { name: '解除静音', description: '解除音乐播放静音状态', examples: '解除静音' },
      Object { name: '静音', description: '音乐静音', examples: '静音音乐;暂时让设备静音;乐曲静音' },
      Object { name: '暂停', description: '暂停音乐播放', examples: '暂停;暂停音乐播放;暂停音乐轨道' },
      Object { name: '继续', description: '继续播放音乐', examples: '继续音乐;再一次播放音乐;去除暂停' }
    ],
    entities: Array [
      Object {
        name: '艺术家名',
        description: '演员、导演、作家、音乐家等艺术家的名称',
        examples: '爱丽丝;泰勒斯威夫特;阿黛尔;莫扎特'
      },
      Object {
        name: '风格',
        description: '音乐风格类型',
        examples: '乡村音乐;百老汇经典;播放巴洛克古典音乐'
      }
    ]
  },
  Object {
    name: '笔记',
    culture: 'zh-cn',
    description: '笔记主题提供记录、查询和修改笔记相关的意图和实体',
    examples: '在我的杂货笔记中加入生菜、番茄、面包和咖啡;从我的杂货单清除香蕉;从我的假期清单中删除所有项目',
    intents: Array [
      Object {
        name: '加入记录',
        description: '在笔记中加入信息',
        examples: '在我的杂货笔记中加入生菜、番茄、面包和咖啡;加入到我的待办事项;在我的愿望单中加入蛋糕'
      },
      Object {
        name: '创建',
        description: '创建新的笔记',
        examples: '创建一个新的列表;记录提醒我杰克会在五月第一周来到城镇'
      },
      Object { name: '删除', description: '删除笔记', examples: '删除假日笔记;删除我的杂货笔记' },
      Object {
        name: '删除项目',
        description: '删除笔记中的项目',
        examples: '删除杂货笔记中的奶酪项;Remove pens from my school shopping list'
      },
      Object { name: '朗读', description: '朗读列表', examples: '朗读第一个;朗读细节' },
      Object {
        name: '显示下一项',
        description: '显示笔记列表的下一项',
        examples: '显示下一个;下一页;之后的一项'
      }
    ],
    entities: Array [
      Object { name: '笔记文本', description: '笔记文本内容', examples: '运动之前进行拉伸;明天长跑' },
      Object { name: '题目', description: '笔记题目', examples: '杂物;联系人列表;待办事项' },
      Object { name: '笔记数据源', description: '笔记所在位置', examples: '微软笔记;谷歌文档;我的电脑' },
      Object { name: '数据类型', description: '文档类型', examples: '演示文稿;电子表格;工作表' }
    ]
  },
  Object {
    name: '设备控制',
    culture: 'zh-cn',
    description: '设备控制主题包含控制设备的意图和实体',
    examples: '关闭视频播放器;取消播放;能让显示器屏幕亮一些吗?',
    intents: Array [
      Object { name: '在听吗', description: '询问装置是否在线', examples: '在线吗？;你在听吗？' },
      Object { name: '关闭应用', description: '关闭应用', examples: '关闭视频播放器' },
      Object { name: '回退', description: '回退一个步骤或到之前状态', examples: '回到上一个步骤' },
      Object {
        name: '帮助',
        description: '请求帮助',
        examples: '请求帮助;你可以帮我做什么？;我需要帮助'
      },
      Object {
        name: '定位设备',
        description: '定位设备',
        examples: '帮我定位我的手机;寻找托尼的iphone;寻找我的电话'
      },
      Object { name: '登录', description: '登录装置服务', examples: '请登录;登陆脸谱网;登陆微软' },
      Object { name: '登出', description: '等处装置服务', examples: '从手机中登出;登出' },
      Object {
        name: '打开应用',
        description: '从设备中打开应用',
        examples: '请打开闹钟;打开照相机;运行日历应用'
      },
      Object { name: '打开设置', description: '打开设备设置', examples: '打开网络设置' },
      Object { name: '关机', description: '关闭设备', examples: '请帮我关闭电脑;关机;关闭手机' },
      Object { name: '查询电量', description: '获得电池信息', examples: '告诉我现在电量' },
      Object { name: '重启', description: '重新启动设备', examples: '请重启电脑' },
      Object { name: '设备响铃', description: '让设备响铃', examples: '让我的电话响铃' },
      Object {
        name: '显示上下文菜单',
        description: '显示上下文菜单',
        examples: '请显示上下文菜单;请为我显示上下文菜单'
      },
      Object { name: '休眠', description: '设备休眠', examples: '休眠;电脑休眠' },
      Object { name: '切换应用', description: '切换设备应用', examples: '切换到音乐播放器' },
      Object { name: '降低亮度', description: '降低设备亮度', examples: '屏幕变暗' },
      Object { name: '关闭设备', description: '关闭设备', examples: '关闭蓝牙;断开显示器' },
      Object {
        name: '开启设备',
        description: '使设置中的项目开启',
        examples: '打开蓝牙;打开WIFI网络'
      },
      Object { name: '增加亮度', description: '增加设备亮度', examples: '可以让显示器变亮点吗？' }
    ],
    entities: Array [
      Object { name: '应用名', description: '应用的名称', examples: '微信;支付宝' },
      Object { name: '设备种类', description: '设备种类', examples: '电话;平板电脑;个人电脑' },
      Object { name: '设置类别', description: '设置类别', examples: '无线网络;颜色种类;通知中心' }
    ]
  },
  Object {
    name: '地点',
    culture: 'zh-cn',
    description: '地点主题提供处理与企业机构、餐馆等公共场所地址相关的查询的意图',
    examples: '收藏这个位置;假日酒店还有多远？;百货大厦什么时候关门？',
    intents: Array [
      Object {
        name: '添加到收藏',
        description: '加入到用户的收藏夹中',
        examples: '将这个地点加入的我的收藏夹中'
      },
      Object { name: '检查事故', description: '询问地点是否有事故', examples: '880路上有事故吗？' },
      Object { name: '查询区域交通', description: '检查地点交通状况', examples: '西雅图交通状况' },
      Object { name: '记录地点', description: '记录地点', examples: '记录当前我的位置' },
      Object { name: '确认', description: '确认地点相关的动作', examples: '确认我预定的餐厅' },
      Object { name: '查询地点', description: '查询某一地点', examples: '附近最近的餐厅是哪一家' },
      Object { name: '查询地址', description: '查询地点地址', examples: '告诉我最近的星巴克地址' },
      Object {
        name: '查询距离',
        description: '查询到某一地点的距离',
        examples: '请问到北大图书馆有多远？'
      },
      Object {
        name: '查询运营时间',
        description: '查询地点的运营时间',
        examples: '请问地铁的营运时间是多少？'
      },
      Object { name: '查询菜单', description: '查询餐厅的菜单', examples: '请告诉我全聚德的菜单' },
      Object {
        name: '查询电话号码',
        description: '查询地点的电话号码',
        examples: '最近的星巴克电话号码是多少？'
      },
      Object { name: '查询评论', description: '查询地点的评论', examples: '查询这家餐厅的评论' },
      Object { name: '导航', description: '查询地点的方向', examples: '如何步行到天安门广场？' },
      Object { name: '查询评级', description: '查询地点评价分数', examples: '请问这家餐厅的评分是多少？' },
      Object { name: '查询公交', description: '查询公交时刻', examples: '请问下次公交什么时候到达？' },
      Object {
        name: '查询出行时间',
        description: '询问到指定地点的出行时间',
        examples: '请问还有多久到达中关村？'
      },
      Object { name: '打电话', description: '打电话', examples: '请给安娜打一个电话' },
      Object { name: '预定位置', description: '预定位置', examples: '预定这家餐厅明晚的桌位' },
      Object {
        name: '查询评分',
        description: '查询某一地点的评分',
        examples: '请问这家餐厅的推荐评分是多少？'
      },
      Object { name: '朗读', description: '朗读地点列表', examples: '请为我朗读餐厅信息' },
      Object { name: '选择项目', description: '选择地点相关选项', examples: '选择第一项' },
      Object { name: '显示地图', description: '显示区域地图', examples: '显示北京地图' },
      Object { name: '显示下一项', description: '显示下一个选项', examples: '显示下一页' },
      Object { name: '重新开始', description: '重新启动应用', examples: '重启' },
      Object { name: '预定餐厅查询', description: '询问餐厅预定情况', examples: '这家餐厅是否能够预定？' },
      Object {
        name: '查询导航路线',
        description: '查询导航路线',
        examples: '告诉我怎么样去北京;如何去西雅图？'
      },
      Object {
        name: '获得价格范围',
        description: '获得价格范围',
        examples: '必胜客很便宜吗？;今天全聚德有折扣吗？'
      }
    ],
    entities: Array [
      Object { name: '具体地址', description: '地址信息', examples: '丹棱街5号' },
      Object { name: '目的地地址', description: '目的地地址', examples: '善缘街' },
      Object { name: '目的地名称', description: '目的地名称', examples: '中关村地铁站' },
      Object { name: '目的地类别', description: '目的地类别 ', examples: '咖啡厅;电影院' },
      Object { name: '餐点类别', description: '餐点类别，如早餐、晚餐', examples: '早餐;晚餐' },
      Object { name: '营业状态', description: '地点的运营状态', examples: '开门;关闭' },
      Object { name: '地点名称', description: '地点名称', examples: '必胜客;' },
      Object { name: '地点类别', description: '地点类别', examples: '咖啡厅;电影院' },
      Object { name: '交通类别', description: '交通类别', examples: '公交;火车' },
      Object { name: '地点设施', description: '地点的设施', examples: '儿童座椅;停车位' },
      Object { name: '地点环境', description: '地点的环境.', examples: '运动型场地;' },
      Object { name: '地点美食', description: '地点的美食', examples: '意大利菜;火锅' },
      Object { name: '地点距离', description: '地点的距离', examples: '15公里;200米' },
      Object { name: '推荐线路', description: '推荐线路', examples: '三环' },
      Object { name: '地点产品', description: '地点提供的产品信息', examples: '新鲜鱼类' },
      Object { name: '公共交通路线', description: '公共交通线路', examples: '公交300' },
      Object { name: '地点评级', description: '地点评级', examples: '3颗星' },
      Object { name: '服务提供', description: '地点所提供的服务', examples: '理发;美容' }
    ]
  },
  Object {
    name: '提醒',
    culture: 'zh-cn',
    description: '提醒主题提供创建、修改和查询提醒的意图和实体',
    examples: '把面试时间改成明早九点;提醒我回家时购买牛奶;检查下我是否有关于李斯生日的提醒',
    intents: Array [
      Object {
        name: '更改提醒',
        description: '更改提醒',
        examples: '更改我的面试到明早九点;移动这个提示到已完成'
      },
      Object {
        name: '创建提醒',
        description: '创建提醒',
        examples: '创建一个提醒;提醒我购买牛奶;提醒我回家的时候给艾莉打电话'
      },
      Object { name: '删除提醒', description: '删除提醒', examples: '删除我的图片提醒;删除这个提醒' },
      Object {
        name: '查询提醒',
        description: '查询提醒',
        examples: '我有关于周年庆的提醒吗？;能够帮我查询关于克里斯生日的提醒吗？'
      }
    ],
    entities: Array [
      Object { name: '提醒文本', description: '提醒描述文本', examples: '将干洗店的衣服拿回来' }
    ]
  },
  Object {
    name: '餐厅',
    culture: 'zh-cn',
    description: '餐厅主题提供管理餐厅预定的意图和实体',
    examples: '今晚保留卓卡餐厅的两人位置;预定一个明天北京餐厅的位置;预定保罗餐厅晚上七点的三人桌位',
    intents: Array [
      Object {
        name: '预定位置',
        description: '预定位置',
        examples: '预定这个餐厅明晚的位置;预定明天11点20人的餐位'
      }
    ],
    entities: Array [
      Object { name: '具体地址', description: '餐厅地址', examples: '丹棱街五号;北京西' },
      Object { name: '地点设施', description: '餐厅场所的设施', examples: '海景;无烟区' },
      Object { name: '地点环境', description: '餐厅环境信息', examples: '浪漫的;适合团队聚餐' },
      Object { name: '地点美食', description: '餐厅美食种类', examples: '川菜;西餐;意大利餐' },
      Object { name: '餐点类别', description: '餐品类别如早餐', examples: '早餐;晚餐;' },
      Object { name: '地点名称', description: '地点名称', examples: '必胜客;东来顺' },
      Object { name: '地点类别', description: '地点类别', examples: '餐厅;饭店;歌剧院' },
      Object { name: '地点评级', description: '餐厅的评级', examples: '5颗星' }
    ]
  },
  Object {
    name: '出租车',
    culture: 'zh-cn',
    description: '出租车主题提供创建和管理预定出租车服务的意图和实体',
    examples: '帮我预定下午三点的出租车;我还要等待出租车多久？;取消优步预定',
    intents: Array [
      Object { name: '预定', description: '预定出租车', examples: '寻找一辆出租车;' },
      Object { name: '取消', description: '取消预订的出租车', examples: '取消我的出租车' },
      Object {
        name: '查询',
        description: '查询出租车路线',
        examples: '出租车距离我还有多远;我的出租车在哪？'
      }
    ],
    entities: Array [
      Object { name: '具体地址', description: '目标地址', examples: '丹棱街5号' },
      Object { name: '目的地名称', description: '目的地名称', examples: '微软大厦;家乐福超市' },
      Object { name: '地点名称', description: '地点名称', examples: '中央公园' },
      Object { name: '地点类别', description: '地点类别', examples: '餐厅;剧院' },
      Object { name: '交通公司', description: '交通公司', examples: '北京地铁' },
      Object { name: '交通类别', description: '交通类别', examples: '公交;火车' }
    ]
  },
  Object {
    name: '翻译',
    culture: 'zh-cn',
    description: '翻译主题提供翻译语言相关的意图和实体',
    examples: '翻译成法语;把你好翻译成德语;翻译这句话为英语',
    intents: Array [
      Object { name: '翻译', description: '翻译到另一种语言', examples: '翻译成法语;翻译成德语' }
    ],
    entities: Array [
      Object { name: '目标语言', description: '目标语言', examples: '法语;德语;韩语' },
      Object { name: '文本', description: '翻译文本', examples: '你好;早上好' }
    ]
  },
  Object {
    name: '天气',
    culture: 'zh-cn',
    description: '天气主题提供获取天气报告和预测信息',
    examples: '九月份伦敦的天气怎么样？;告诉我这十天的天气预测信息;印度九月份的平均温度是多少？',
    intents: Array [
      Object { name: '查询天气', description: '查询历史天气', examples: '九月份北京天气如何？' },
      Object {
        name: '天气预测',
        description: '获得未来天气预测',
        examples: '周末的天气怎么样？;今天的天气如何？'
      }
    ],
    entities: Array [
      Object { name: '地点', description: '天气涉及的地点信息', examples: '北京;上海' }
    ]
  },
  Object {
    name: '网页导航',
    culture: 'zh-cn',
    description: '网页导航主题提供与网页导航相关的意图和实体',
    examples: '导航到必应搜索;查看新浪微博;导航到www.bing.com',
    intents: Array [
      Object {
        name: '网页导航',
        description: '导航到目标网站页面',
        examples: '导航到必应搜索;导航到微博'
      }
    ],
    entities: Array []
  }
] to have property length of 34 (got 35)
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value (node_modules\should\cjs\should.js:356:19)
      at promiseDelay.then.then (test\language\languageUnderstandingTest.js:270:38)
      at <anonymous>

  2) Language understanding (LUIS) Create app before, delete app after should get list of LUIS custom prebuilt domains for each supported culture:
     AssertionError: expected Array [
  Object {
    name: 'Calendar',
    culture: 'en-us',
    description: 'The Calendar domain provides intents and entities related to calendar entries. The Calendar intents include adding, deleting or editing an appointment, checking availability, and finding information about a calendar entry or appointment.',
    examples: 'Make an appointment with Lisa at 2pm on Sunday; When is Jim available to meet?; Delete my 9 am meeting',
    intents: Array [
      Object {
        name: 'Add',
        description: 'Add a new one-time item to the calendar.',
        examples: 'Make an appointment with Lisa at 2pm on Sunday; I want to schedule a meeting ; I need to set up a meeting'
      },
      Object {
        name: 'CheckAvailability',
        description: 'Find availability for an appointment or meeting on the user\'s calendar or another person\'s calendar.',
        examples: 'When is Jim available to meet?; Show when Carol is available tomorrow; Is Chris free on Saturday?'
      },
      Object {
        name: 'Delete',
        description: 'Request to delete a calendar entry.',
        examples: 'Cancel my appointment with Carol; Delete my 9 am meeting'
      },
      Object {
        name: 'Edit',
        description: 'Request to change an existing meeting or calendar entry.',
        examples: 'Move my 9 am meeting to 10 am; I want to update my schedule; Reschdule my meeting with Ryan'
      },
      Object {
        name: 'Find',
        description: 'Request to view or find information about their calendar or any specific existing calendar entry.',
        examples: 'Display my weekly calendar;  Show my calendar;  Find the dentist review appointment.'
      }
    ],
    entities: Array [
      Object {
        name: 'Location',
        description: '"Location of calendar item, meeting or appointment. Addresses, cities, and regions are good examples of locations."',
        examples: '209 Nashville Gym; 897 Pancake house; Garage'
      },
      Object {
        name: 'Subject',
        description: 'The title of a meeting or appointment.',
        examples: 'Dentist\'s appointment;  Lunch with Julia; Doctor\'s appointment'
      }
    ]
  },
  Object {
    name: 'Camera',
    culture: 'en-us',
    description: 'The Camera domain provides intents and entities related to using a camera. The intents cover capturing a photo, selfie, screenshot or video, and broadcasting video to an application.',
    examples: 'Capture the screen; Take a selfie; Start broadcasting to Facebook',
    intents: Array [
      Object {
        name: 'CapturePhoto',
        description: 'Capture a photo.',
        examples: 'Take a photo; capture'
      },
      Object {
        name: 'CaptureScreenshot',
        description: 'Capture a screenshot.',
        examples: 'Take screen shot; capture the screen'
      },
      Object {
        name: 'CaptureSelfie',
        description: 'Capture a selfie.',
        examples: 'Take a selfie; take a picture of me'
      },
      Object {
        name: 'CaptureVideo',
        description: 'Start recording video.',
        examples: 'Start recording; Begin recording'
      },
      Object {
        name: 'StartBroadcasting',
        description: 'Start broadcasting video.',
        examples: 'Start broadcasting to Facebook'
      },
      Object {
        name: 'StopBroadcasting',
        description: 'Stop broadcasting video.',
        examples: 'Stop broadcasting'
      },
      Object {
        name: 'StopVideoRecording',
        description: 'Stop recording a video.',
        examples: 'That\'s enough; stop recording'
      }
    ],
    entities: Array [
      Object {
        name: 'AppName',
        description: 'The name of an application to broadcast video to.',
        examples: 'OneNote; Facebook; Skype'
      }
    ]
  },
  Object {
    name: 'Communication',
    culture: 'en-us',
    description: 'The Communication domain provides intents and entities related to email, messages and phone calls.',
    examples: 'Connect me to my voicemail box; Save this number and put the name as Carol; Switch on call forwarding to 3333',
    intents: Array [
      Object {
        name: 'AddContact',
        description: 'Add a new contact to the user\'s list of contacts.',
        examples: 'Add new contact; Save this number and put the name as Carol'
      },
      Object {
        name: 'AddMore',
        description: '"Add more to an email or text, as part of a step-wise email or text composition."',
        examples: 'Add more to text; Add more to email body'
      },
      Object {
        name: 'Answer',
        description: 'Answer an incoming phone call.',
        examples: 'Answer the call; Pick it up'
      },
      Object {
        name: 'AssignContactNickname',
        description: 'Assign a nickname to a contact.',
        examples: 'Change Isaac to dad; Add nickname to Carol Hanna; Edit Jim\'s nickname'
      },
      Object {
        name: 'CallVoiceMail',
        description: 'Connect to the user\'s voice mail.',
        examples: 'Connect me to my voicemail box; Call voicemail; Voice mail'
      },
      Object {
        name: 'CheckIMStatus',
        description: 'Check the status of a contact in Skype.',
        examples: 'Is Jim\'s online status set to away?; Is Carol available to chat with?'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action.',
        examples: 'Yes; Okay; All right; I confirm that I want to send this email.'
      },
      Object {
        name: 'FindContact',
        description: 'Find contact information by name.',
        examples: 'Find Carol\'s number; Show me Carol\'s number'
      },
      Object {
        name: 'TurnForwardingOff',
        description: 'Turn off call forwarding.',
        examples: 'Stop forwarding my calls; Switch off call forwarding'
      },
      Object {
        name: 'TurnForwardingOn',
        description: 'Turn on call forwarding.',
        examples: 'Forwarding my calls to 3333; Switch on call forwarding to 3333'
      },
      Object {
        name: 'GetForwardingsStatus',
        description: 'Get the current status of call forwarding.',
        examples: 'Is my call forwarding turned on?; Tell me if my call status is on or off'
      },
      Object {
        name: 'GoBack',
        description: 'Go back to the previous step.',
        examples: 'Go back to twitter; Go back a step; Go back'
      },
      Object {
        name: 'Ignore',
        description: 'Ignore an incoming call.',
        examples: 'Don\'t answer; Ignore call'
      },
      Object {
        name: 'IgnoreWithMessage',
        description: 'Ignore an incoming call and reply with text instead.',
        examples: 'Don\'t answer that call but send a message instead; Ignore and send a text back'
      },
      Object {
        name: 'Dial',
        description: 'Make a phone call.',
        examples: 'Call Jim; Please dial 311'
      },
      Object {
        name: 'PressKey',
        description: 'Press a button or number on the keypad.',
        examples: 'Dial star; Press the 1 2 3'
      },
      Object {
        name: 'ReadAloud',
        description: 'Read a message or email to the user.',
        examples: 'read text; what did she say in the message'
      },
      Object {
        name: 'Redial',
        description: 'Redial or call a number again.',
        examples: 'redial; redial my last call'
      },
      Object {
        name: 'SendEmail',
        description: 'Send an email. This intent applies to email but not text messages.',
        examples: 'email to mike waters mike that dinner last week was splendid; send an email to bob'
      },
      Object {
        name: 'SendMessage',
        description: 'Send a text message or an instant message.',
        examples: 'Send text to Chris and Carol'
      },
      Object {
        name: 'SetSpeedDial',
        description: 'Set a speed dial shortcut for a contact\'s phone number.',
        examples: 'Set speed dial one for Carol; setup speed dial for mom'
      },
      Object {
        name: 'ShowNext',
        description: '"See the next item, for example, in a list of text messages or emails."',
        examples: 'Show the next one; go to the next page'
      },
      Object {
        name: 'ShowPrevious',
        description: '"See the previous item, for example, in a list of text messages or emails."',
        examples: 'show the previous one; previous; go to previous'
      },
      Object {
        name: 'TurnSpeakerOff',
        description: 'Turn off the speaker phone.',
        examples: 'take me off speaker; turn off speakerphone'
      },
      Object {
        name: 'TurnSpeakerOn',
        description: 'Turn on the speaker phone.',
        examples: 'speakerphone mode; put speakerphone on'
      },
      Object {
        name: 'StartOver',
        description: 'Start the system over or start a new session.',
        examples: 'Start over;  New session; restart'
      },
      Object {
        name: 'FindSpeedDial',
        description: 'Find the speedial number a phone number is set to and vice versa.',
        examples: 'What is my dial number 5?; Do I have speed dial set?; What is the dial number for 941-5555-333?'
      },
      Object {
        name: 'Reject',
        description: 'Reject an incoming call.',
        examples: 'Reject call; Can\'t answer now; Not available at the moment and will call back later'
      }
    ],
    entities: Array [
      Object {
        name: 'ContactName',
        description: 'The name of a contact or message recipient.',
        examples: 'Carol; Jim; Chris'
      },
      Object {
        name: 'EmailSubject',
        description: 'The text used as the subject line for an email.',
        examples: 'RE: interesting story'
      },
      Object {
        name: 'SenderName',
        description: 'The name of the sender.',
        examples: 'Patti Owens'
      },
      Object {
        name: 'Message',
        description: 'The message to send as an email or text.',
        examples: 'It was great meeting you today. See you again soon!'
      },
      Object {
        name: 'Category',
        description: 'The category of a message or email.',
        examples: 'Important; High priority'
      },
      Object {
        name: 'MessageType',
        description: 'The type of message to search for.',
        examples: 'Text; Email'
      },
      Object {
        name: 'OrderReference',
        description: '"The ordinal or relative position in a list, identifying an item to retrieve. For example, last or recent in What was the last message I sent?."',
        examples: 'Last; Recent'
      },
      Object {
        name: 'AudioDeviceType',
        description: '"Type of audio device (speaker, headset, microphone, etc)."',
        examples: 'Speaker; Hands-free; Bluetooth'
      },
      Object {
        name: 'ContactAttribute',
        description: 'The attribute of the contact the user inquires about.',
        examples: 'Birthdays; Address; Phone number'
      },
      Object {
        name: 'Line',
        description: 'The line the user wants to use to make a call or send a text/email from.',
        examples: 'Work line; British cell; Skype'
      }
    ]
  },
  Object {
    name: 'Entertainment',
    culture: 'en-us',
    description: 'The Entertainment domain provides intents and entities related to searching for movies, music, games and TV shows.',
    examples: 'Search the store for Halo; Search for Avatar; Look for Comedies',
    intents: Array [
      Object {
        name: 'Search',
        description: '"Search for movies, music, apps, games and TV shows."',
        examples: 'Search the store for Halo; search for Avatar'
      }
    ],
    entities: Array [
      Object {
        name: 'ContentRating',
        description: '"Media content rating like G, or R for movies."',
        examples: 'Kids video;PG rated'
      },
      Object {
        name: 'Genre',
        description: '"The genre of a movie, game, app or song."',
        examples: 'Comedies; Dramas; Funny'
      },
      Object {
        name: 'Language',
        description: '"The language of a movie, show, or music."',
        examples: 'French; English; Korean'
      },
      Object {
        name: 'Nationality',
        description: '"The country where a movie, show, or song was created."',
        examples: 'French; German; Korean'
      },
      Object {
        name: 'Person',
        description: '"The actor, director, producer, musician or artist associated with a movie, app, game or TV show."',
        examples: 'Madonna; Stanley Kubrick'
      },
      Object {
        name: 'Role',
        description: 'Role played by a person in the creation of media.',
        examples: 'Sings; Directed by; By'
      },
      Object {
        name: 'Title',
        description: '"The name of a movie, app, game, TV show, or song."',
        examples: 'Friends; Minecraft'
      },
      Object {
        name: 'Type',
        description: '"The type or media format of a movie, app, game, TV show, or song."',
        examples: 'Music; Movie; TV shows'
      },
      Object {
        name: 'UserRating',
        description: 'User user star or thumbs rating.',
        examples: '5 stars; 3 stars;  4 stars'
      },
      Object {
        name: 'Keyword',
        description: 'A generic search keyword specifying an attribute the doesn\'t exist in the more specific media slots.',
        examples: 'Soundtracks; Moon River; Amelia Earhart'
      },
      Object {
        name: 'MediaSource',
        description: 'Mentions of the store/marketplace.',
        examples: 'Halo; Netflix; Prime'
      },
      Object {
        name: 'MediaSubTypes',
        description: 'Media types smaller than movies and games.',
        examples: 'Demos; Dlc; Trailers'
      },
      Object {
        name: 'MediaFormat',
        description: 'The additional special technical type in which the media is formatted.',
        examples: 'HD movies; 3D movies; Downloadable'
      }
    ]
  },
  Object {
    name: 'Events',
    culture: 'en-us',
    description: 'The Events domain provides intents and entities related to booking tickets for events like concerts, festivals, sports games and comedy shows.',
    examples: 'I\'d like to buy a ticket for the symphony this weekend; Get tickets for Shakespeare in the Park; Cancel my ticket order',
    intents: Array [
      Object {
        name: 'Book',
        description: 'Purchase tickets to an event.',
        examples: 'I\'d like to buy a ticket for the symphony this weekend.'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'Event location or address.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'Name',
        description: 'The name of an event.',
        examples: 'Shakespeare in the Park'
      },
      Object {
        name: 'Type',
        description: 'The type of an event.',
        examples: 'Concert; Sports game'
      },
      Object {
        name: 'PlaceName',
        description: 'The event location name.',
        examples: 'Louvre; Opera House; Broadway'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of the location the event will be held in.',
        examples: 'Cafe; Theatre; Library'
      }
    ]
  },
  Object {
    name: 'Fitness',
    culture: 'en-us',
    description: 'The Fitness domain provides intents and entities related to tracking fitness activities. The intents include saving notes, remaining time or distance, or saving activity results.',
    examples: 'The difficulty of this run was 6/10; How much time till the next lap?;  Log my Saturday morning walk',
    intents: Array [
      Object {
        name: 'AddNote',
        description: 'Adds supplemental notes to a tracked activity.',
        examples: 'The difficulty of this run was 6/10; The terrain I am on running on is asphalt; I am using a 3 speed bike'
      },
      Object {
        name: 'GetRemaining',
        description: 'Gets the remaining time or distance for an activity.',
        examples: 'How much time till the next lap?; How many miles are remaining in my run? How much time for the split?'
      },
      Object {
        name: 'LogActivity',
        description: 'Save or log completed activity results.',
        examples: 'Save my last run; Log my Saturday morning walk; store my previous swim'
      },
      Object {
        name: 'LogWeight',
        description: 'Save or log the user\'s current weight.',
        examples: 'Save my current weight; log my weight now; store my current body weight'
      }
    ],
    entities: Array [
      Object {
        name: 'ActivityType',
        description: 'The type of activity to track.',
        examples: 'Run; Walk; Swim; Cycle'
      },
      Object {
        name: 'Food',
        description: 'A type of food to track in a fitness app.',
        examples: 'Banana; Salmon; Protein Shake'
      },
      Object {
        name: 'MealType',
        description: 'The meal type to track in a health or fitness app.',
        examples: 'Breakfast; Dinner; Lunch; Supper'
      },
      Object {
        name: 'Measurement',
        description: '"A type of measurements for time, distance or weight, for use in a fitness or health app."',
        examples: 'Kilometers; Miles; Minutes; Kilograms'
      },
      Object {
        name: 'Number',
        description: 'A numeric quantity for use in a fitness or health app.',
        examples: '19; three; 200; one'
      },
      Object {
        name: 'StatType',
        description: '"A statistic type on aggregated data, for use in a fitness or health app. For example, sum, average, maximum, minimum."',
        examples: 'Sum; Average; Maximum; Minimum'
      }
    ]
  },
  Object {
    name: 'Gaming',
    culture: 'en-us',
    description: 'The Gaming domain provides intents and entities related to managing a game party in a multiplayer game.',
    examples: 'Join my clan;  I\'m leaving this party for another; should we start a clan tonight',
    intents: Array [
      Object {
        name: 'InviteParty',
        description: 'Invite a contact to join a gaming party.',
        examples: 'Invite this player to my party; Come to my party; Join my clan'
      },
      Object {
        name: 'LeaveParty',
        description: 'Leave a gaming party in a multiplayer game.',
        examples: 'I\'m out; I\'m leaving this party for another; I am quitting'
      },
      Object {
        name: 'StartParty',
        description: 'Start a gaming party in a multiplayer game.',
        examples: 'Dude let\'s start a party; start a party; should we start a clan tonight'
      }
    ],
    entities: Array [
      Object {
        name: 'Contact',
        description: 'A contact name to use in a multiplayer game.',
        examples: 'Carol; Jim; Chris'
      }
    ]
  },
  Object {
    name: 'HomeAutomation',
    culture: 'en-us',
    description: 'The Home Automation domain provides intents and entities related to controlling smart home devices like lights and appliances.',
    examples: 'Turn off the lights; Turn on my coffee maker; Close garage door',
    intents: Array [
      Object {
        name: 'TurnOff',
        description: '"Turn off, close, or unlock a device."',
        examples: 'Turn off the lights; Stop the coffee maker; Close garage door'
      },
      Object {
        name: 'TurnOn',
        description: 'Turn on a device or set the device to a particular setting or mode.',
        examples: 'turn on my coffee maker;  can you turn on my coffee maker?;  Set the thermostat to 72 degrees.'
      }
    ],
    entities: Array [
      Object {
        name: 'Device',
        description: 'A type of device that can be turned on or off .',
        examples: 'coffee maker; thermostat; lights'
      },
      Object {
        name: 'Room',
        description: 'The location or room the device is in.',
        examples: 'living room; bedroom; kitchen'
      },
      Object {
        name: 'Operation',
        description: 'The current state of the device.',
        examples: 'lock; open; on; off'
      }
    ]
  },
  Object {
    name: 'MovieTickets',
    culture: 'en-us',
    description: 'The Movie Tickets domain provides intents and entities related to booking tickets to movies at a movie theater.',
    examples: 'Book me two tickets for Captain Omar and the two Musketeers; Cancel tickets; When is Captain Omar showing?',
    intents: Array [
      Object {
        name: 'Book',
        description: 'Purchase movie tickets.',
        examples: 'Book me two tickets for Captain Omar and the two musketeers; I want to buy a ticket for tomorrow\'s movie; I want a ticket for Captian Omar Part 2 next Wednesday'
      },
      Object {
        name: 'GetShowTime',
        description: 'Get the showtime of a movie.',
        examples: 'When is Captain Omar showing?'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'The address of a movie theater.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'MovieTitle',
        description: 'The title of a movie.',
        examples: 'Life of Pi;Hunger Games;Inception'
      },
      Object {
        name: 'PlaceName',
        description: 'The name of a movie theater or cinema.',
        examples: 'Cinema Amir; Alexandria Theatre; New York Theater'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of location a movie is showing at.',
        examples: 'cinema; theater; IMAX cinema'
      }
    ]
  },
  Object {
    name: 'Music',
    culture: 'en-us',
    description: 'The Music domain provides intents and entities related to playing music on a music player.',
    examples: 'play Kevin Durant; Increase track volume; Skip to the next song',
    intents: Array [
      Object {
        name: 'DecreaseVolume',
        description: 'Decrease the device volume.',
        examples: 'increase track volume; volume up'
      },
      Object {
        name: 'IncreaseVolume',
        description: 'Increase the device volume.',
        examples: 'decrease track volume; volume down'
      },
      Object {
        name: 'PlayMusic',
        description: 'Play music on a device.',
        examples: 'play Kevin Durant; play Paradise by Coldplay; play Hello by Adele'
      },
      Object {
        name: 'SkipBack',
        description: 'Skip backwards a track.',
        examples: 'Skip to the next song; Play the next song'
      },
      Object {
        name: 'SkipForward',
        description: 'Skip forward a track.',
        examples: 'Play the previous song; Go back to the previous track'
      },
      Object {
        name: 'Stop',
        description: 'Stop an action relating to music playback.',
        examples: 'Stop playing this album'
      },
      Object {
        name: 'Unmute',
        description: 'Unmute a music playback device.',
        examples: 'Unmute.'
      },
      Object {
        name: 'Mute',
        description: 'Mute the playing music.',
        examples: 'Mute song; Put the track on mute; Mute music'
      },
      Object {
        name: 'Pause',
        description: 'Pause the playing music.',
        examples: 'Pause; Pause music; Pause track'
      },
      Object {
        name: 'Repeat',
        description: 'Repeat the playing music.',
        examples: 'Repeat song; Play the track gain; Repeat music'
      },
      Object {
        name: 'Resume',
        description: 'Resume the playing music.',
        examples: 'Resume song; Start music again; Unpause'
      }
    ],
    entities: Array [
      Object {
        name: 'ArtistName',
        description: '"The actor, director, producer, writer, musician or artist associated with media to play on a device."',
        examples: 'Elvis Presley; Taylor Swift; Adele; Mozart'
      },
      Object {
        name: 'Genre',
        description: 'The genre of the music being requested.',
        examples: 'Country music; Broadway classics; Play my classical music from the Baroque period'
      }
    ]
  },
  Object {
    name: 'Note',
    culture: 'en-us',
    description: 'The Note domain provides intents and entities related to finding, editing and creating notes.',
    examples: 'Add to my groceries note lettuce tomato bread coffee; Check off bananas from my grocery list; Remove all items from my vacation list',
    intents: Array [
      Object {
        name: 'AddToNote',
        description: 'Add information to a note.',
        examples: 'Add to my groceries note lettuce tomato bread coffee;  Add to my todo list; add cupcakes to my Wunderlist'
      },
      Object {
        name: 'CheckOffItem',
        description: 'Check off items from a pre-existing note.',
        examples: 'Check off bananas from my grocery list;  Mark cheese cake on my holiday shopping list as done'
      },
      Object {
        name: 'Clear',
        description: 'Clear all items from a pre-existing note.',
        examples: 'Remove all items from my vacation list; Clear all from my reading list'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action relating to a note.',
        examples: 'It\'s okay by me;yes;I am confirming keeping all items on lists'
      },
      Object {
        name: 'Create',
        description: 'Create a new note.',
        examples: 'Create a list;  Note to remind me that Jason is in town first week of May'
      },
      Object {
        name: 'Delete',
        description: 'Delete an entire note.',
        examples: 'Delete my vacation list; delete my groceries note'
      },
      Object {
        name: 'DeleteNoteItem',
        description: 'Delete items from a pre-existing note.',
        examples: 'Delete chips from my grocery list; Remove pens from my school shopping list'
      },
      Object {
        name: 'ReadAloud',
        description: 'Read a list out loud',
        examples: 'Read me the first one;  Read me the details'
      },
      Object {
        name: 'ShowNext',
        description: 'See the next item in a list of notes.',
        examples: 'Show the next one; Next page; Next'
      }
    ],
    entities: Array [
      Object {
        name: 'AppName',
        description: 'The note-taking application name.',
        examples: 'Wunderlist; OneNote'
      },
      Object {
        name: 'ContactName',
        description: 'The name of a contact in a note.',
        examples: 'Carol; Jim; Chris'
      },
      Object {
        name: 'Text',
        description: 'The text of a note or reminder.',
        examples: 'stretch before walking; long run tomorrow'
      },
      Object {
        name: 'Title',
        description: 'Title of a note.',
        examples: 'groceries; people to call; to-do'
      },
      Object {
        name: 'DataSource',
        description: 'Location of notes.',
        examples: 'OneDrive; Google docs; my computer'
      },
      Object {
        name: 'DataType',
        description: 'The type of file or document, usually associated with particular software programs.',
        examples: 'Slides; Spreadsheet; Worksheet'
      }
    ]
  },
  Object {
    name: 'OnDevice',
    culture: 'en-us',
    description: 'The OnDevice domain provides intents and entities related to controlling the  devices.',
    examples: 'Close video player; Cancel playback; Can you make the screen brighter?',
    intents: Array [
      Object {
        name: 'AreYouListening',
        description: 'Ask if the device is listening.',
        examples: 'is this on?; are you listening?'
      },
      Object {
        name: 'CloseApplication',
        description: 'Close the device application.',
        examples: 'close video player'
      },
      Object {
        name: 'FileBug',
        description: 'File a bug on the device.',
        examples: 'file a bug please;Can you file a bug for me ?;Let me report this bug'
      },
      Object {
        name: 'GoBack',
        description: 'Ask to go back one step or return to the previous step.',
        examples: 'Go back please;Go to previous screen;Go back stop listening'
      },
      Object {
        name: 'Help',
        description: 'Request help.',
        examples: 'Help please;Hello; What can you do?;I need help'
      },
      Object {
        name: 'LocateDevice',
        description: 'Locate the device.',
        examples: 'Can you locate my phone;Find tom\'s iphone;Find my phone'
      },
      Object {
        name: 'LogIn',
        description: 'Log in to a service using the device.',
        examples: 'Login please;Facebook log in;Log into LinkedIn'
      },
      Object {
        name: 'LogOut',
        description: 'Log out of a service using the device.',
        examples: 'Log off my phone;Log on to twitter;Log out'
      },
      Object {
        name: 'MainMenu',
        description: 'View the main menu of a device.',
        examples: 'View menu.'
      },
      Object {
        name: 'OpenApplication',
        description: 'Open an application on the device.',
        examples: 'Open the alarm please;Turn on camera;Launch calendar'
      },
      Object {
        name: 'OpenSetting',
        description: 'Open a setting on the device.',
        examples: 'Open network settings.'
      },
      Object {
        name: 'PairDevice',
        description: 'Pair the device.',
        examples: 'Can you help me in pairing Bluetooth signal to phone;Turn the bluetooth on and pair it with laptop;Pair Bluetooth signal to my laptop'
      },
      Object {
        name: 'PowerOff',
        description: 'Turn off the device.',
        examples: 'Can you shut down my computer;Shutdown;Turn off my mobile'
      },
      Object {
        name: 'QueryBattery',
        description: 'Get information about battery life.',
        examples: 'Show me battery life.'
      },
      Object {
        name: 'QueryWifi',
        description: 'Get information about WiFi.',
        examples: 'What\'s my battery status;How much battery left now?;Show me battery'
      },
      Object {
        name: 'Restart',
        description: 'Restart the device.',
        examples: 'Please restart.'
      },
      Object {
        name: 'RingDevice',
        description: '"Ask the device to ring, in order to find it when it\'s lost."',
        examples: 'Ring my phone.'
      },
      Object {
        name: 'SetBrightness',
        description: 'Set the device brightness.',
        examples: 'Set brightness to medium;Set brightness to high;Set brightness to low'
      },
      Object {
        name: 'SetupDevice',
        description: 'Initiate device setup.',
        examples: 'I want to install OS setup;Setup please;Do setup for me'
      },
      Object {
        name: 'ShowAppBar',
        description: 'Show an app bar.',
        examples: 'Show me the application bar;Application bar please;Let me see the application bar'
      },
      Object {
        name: 'ShowContextMenu',
        description: 'Show a context menu.',
        examples: 'Let me see the context menu;Context menu please;Can you show me the context menu'
      },
      Object {
        name: 'Sleep',
        description: 'Put the device to sleep.',
        examples: 'Go to sleep;Sleep;My computer sleep'
      },
      Object {
        name: 'SwitchApplication',
        description: 'Switch the application to use on the device.',
        examples: 'Switch to my media player.'
      },
      Object {
        name: 'TurnDownBrightness',
        description: 'Turn down device brightness.',
        examples: 'Dim the screen.'
      },
      Object {
        name: 'TurnOffSetting',
        description: 'Turn off a device setting.',
        examples: 'Deactivate Bluetooth;Disable data;Disconnect bluetooth'
      },
      Object {
        name: 'TurnOnSetting',
        description: 'Turn on a device setting.',
        examples: 'On;Off'
      },
      Object {
        name: 'TurnUpBrightness',
        description: 'Turn up device brightness.',
        examples: 'Can you make the screen brighter?'
      }
    ],
    entities: Array [
      Object {
        name: 'AppName',
        description: 'Name of an application on the device.',
        examples: 'SoundCloud; YouTube'
      },
      Object {
        name: 'BrightnessLevel',
        description: 'Set the brightness level on the device.',
        examples: 'One hundred percent;Fifty;40%'
      },
      Object {
        name: 'ContactName',
        description: 'The name of a contact on the device.',
        examples: 'Paul;Marlen Max'
      },
      Object {
        name: 'DeviceType',
        description: 'The type of device.',
        examples: 'Phone;kindle;Laptop'
      },
      Object {
        name: 'MediaType',
        description: 'The media type handled by the device.',
        examples: 'Music; Movie; TV shows'
      },
      Object {
        name: 'SettingType',
        description: 'A type of setting or settings panel that the user wants to edit.',
        examples: 'WiFi; Wireless Network;  Color Scheme; Notification [Center]'
      }
    ]
  },
  Object {
    name: 'Places',
    culture: 'en-us',
    description: 'The Places domain provides intents for handling queries related to places like businesses, institution, restaurants, public spaces and addresses.',
    examples: 'Save this location to my favorites; How far away is Holiday Inn?; At what time does Safeway close?',
    intents: Array [
      Object {
        name: 'AddFavoritePlace',
        description: 'Add a location to the the user\'s favorites list.',
        examples: 'Save this location to my favorites; Add this address to my favorites'
      },
      Object {
        name: 'CheckAccident',
        description: 'Ask whether there is an accident on a specified road.',
        examples: 'Is there an accident on 880?; Show me accident information'
      },
      Object {
        name: 'CheckAreaTraffic',
        description: '"Check the traffic for a general area or highway, not on a specified route."',
        examples: 'Traffic in Seattle;  What\'s the traffic like in Seattle?'
      },
      Object {
        name: 'CheckIntoPlace',
        description: 'Check in to a place using social media.',
        examples: 'Check me in on Foursquare; Check in here'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action relating to a place.',
        examples: 'Confirm my restaurant reservation.'
      },
      Object {
        name: 'Exit',
        description: 'Action to exit a task relating to a place.',
        examples: 'Quit please;Quit giving me directions'
      },
      Object {
        name: 'FindPlace',
        description: '"Search for a place (business, institution, restaurant, public space, address)."',
        examples: 'Where\'s the nearest library?; Find me a good Italian restaurant in Mountain View'
      },
      Object {
        name: 'GetAddress',
        description: 'Ask for the address of a place.',
        examples: 'Show me the address of Guu on Robson street;  What is the address of the nearest Starbucks?'
      },
      Object {
        name: 'GetDistance',
        description: 'Ask about distance to a specific place.',
        examples: 'How far away is Holiday Inn?;  how far is it to Bellevue square from here;  what\'s the distance to Tahoe'
      },
      Object {
        name: 'GetHours',
        description: 'Ask about the operating hours for a place.',
        examples: 'At what time does Safeway close?;  What are the hours for Home Depot?;  Is Starbucks still open?'
      },
      Object {
        name: 'GetMenu',
        description: 'Ask for the menu items for a restaurant.',
        examples: 'Does Zucca serve anything vegan?;  What\'s on the menu at Sizzler;  Show me Applebee\'s menu'
      },
      Object {
        name: 'GetPhoneNumber',
        description: 'Ask for the phone number of a place.',
        examples: 'What is the phone number of the nearest Starbucks?; Give the number for Home Depot'
      },
      Object {
        name: 'GetReviews',
        description: 'Ask for reviews of a place.',
        examples: 'Show me reviews for Cheesecase Factory; Read Cineplex reviews in Yelp'
      },
      Object {
        name: 'GetRoute',
        description: 'Ask for directions to a place.',
        examples: 'How to walk to Bellevue square;  Show me the shortest way to 8th and 59th from here; Get me directions to Mountain View CA'
      },
      Object {
        name: 'GetStarRating',
        description: 'Ask for the star rating of a place.',
        examples: 'How is Zucca rated according to Yelp?;  How many stars does the French Laundry have?;  Is the aquarium in Monterrey good?'
      },
      Object {
        name: 'GetTransportationSchedule',
        description: 'Get the bus schedule for a place.',
        examples: 'What time is the next bus to downtown?;  Show me the buses in King County'
      },
      Object {
        name: 'GetTravelTime',
        description: 'Ask  for the travel time to a specified destination.',
        examples: 'How long will it take to get to San Francisco from here;  What\'s the driving time to Denver from SF'
      },
      Object {
        name: 'MakeCall',
        description: 'Make a phone call to a place.',
        examples: 'Call mom;  I would like to place a Skype call to Anna; Call Jim'
      },
      Object {
        name: 'MakeReservation',
        description: 'Request a reservation for a restaurant or other business.',
        examples: 'Reserve at Zucca for two for tonight;  Book a table for tomorrow; Table for 3 in Palo Alto at 8'
      },
      Object {
        name: 'MapQuestions',
        description: 'Request information about directions or whether a specified road goes to a destination.',
        examples: 'Does 13 pass through downtown?; Can I take 880 to Oakland?'
      },
      Object {
        name: 'Rating',
        description: 'Get the rating description of a restaurant or place.',
        examples: 'How many stars does the Contoso Inn have?'
      },
      Object {
        name: 'ReadAloud',
        description: 'Read a list of places out loud.',
        examples: 'Read me the first one;  Read me the details'
      },
      Object {
        name: 'SelectItem',
        description: 'Choose an item from a list of choices relating to a place or places.',
        examples: 'Pick the second one; Select the first'
      },
      Object {
        name: 'ShowMap',
        description: 'Show a map of an area.',
        examples: 'Show a map for the second one ; Show map; Find San Francisco on the map'
      },
      Object {
        name: 'ShowNext',
        description: 'Show the next item in a series.',
        examples: 'Show the next one; go to the next page'
      },
      Object {
        name: 'ShowPrevious',
        description: 'Show the previous item in a series.',
        examples: 'show previous one; previous; go to previous'
      },
      Object {
        name: 'StartOver',
        description: 'Restart the app or start a new session.',
        examples: 'Start over;  New session; restart'
      },
      Object {
        name: 'TakesReservations',
        description: 'Ask whether a place accepts reservations.',
        examples: 'Does the art gallery accept reservations; Is it possible to make a reservation at the Olive Garden'
      },
      Object {
        name: 'CheckRouteTraffic',
        description: 'Check the traffic of a specific route specified by the user.',
        examples: 'How is the traffic to Mashiko?; Show me the traffice to Kirkland; How is the traffic to Seattle?'
      },
      Object {
        name: 'GetPriceRange',
        description: 'User asks for the price range of a place.',
        examples: 'Is Zucca cheap?; Is the Cineplex half price on Wednesdays?; How much does a whole lobster dinner cost at Sizzler?'
      }
    ],
    entities: Array [
      Object {
        name: 'AbsoluteLocation',
        description: 'The location or address of a place.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationAddress',
        description: 'A destination location or address.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationPlaceName',
        description: '"The name of a destination that is a business, restaurant, public attraction, or institution. "',
        examples: 'central park; safeway; walmart'
      },
      Object {
        name: 'DestinationPlaceType',
        description: '"The type of a destination that is a business, restaurant, public attraction, or institution. "',
        examples: 'Cafe; Theatre; Library'
      },
      Object {
        name: 'MealType',
        description: 'Type of meal like breakfast or lunch.',
        examples: 'breakfast; dinner; lunch; supper'
      },
      Object {
        name: 'OpenStatus',
        description: 'Indicates whether a place is open or closed.',
        examples: 'Open; closed; opening'
      },
      Object {
        name: 'PlaceName',
        description: 'The name of a place.',
        examples: 'Cheesecake Factory;'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of a place.',
        examples: 'Cafe; Theatre; Library'
      },
      Object {
        name: 'TransportationCompany',
        description: 'The name of a public transport provider.',
        examples: 'Amtrack;  Acela; Greyhound'
      },
      Object {
        name: 'TransportationType',
        description: 'A type of transportation.',
        examples: 'Bus; Train; Driving'
      },
      Object {
        name: 'Amenities',
        description: 'The objective characteristics/benefits of a place.',
        examples: 'kids eat free; waterfront; free parking'
      },
      Object {
        name: 'Atmosphere',
        description: 'The atmosphere of a place.',
        examples: 'kid-friendly; casual restaurant; sporty'
      },
      Object {
        name: 'RouteAvoidanceCriteria',
        description: '"Criteria for avoiding specific routes like avoiding accidents, constructions or tolls."',
        examples: 'Tolls; Constructions; Route 11'
      },
      Object {
        name: 'Cuisine',
        description: 'The cuisine of a place.',
        examples: 'Mediterranean; Italian; Indian'
      },
      Object {
        name: 'Distance',
        description: 'The distance to a place.',
        examples: '15 miles; 5 miles; 10 miles away'
      },
      Object {
        name: 'PreferredRoute',
        description: 'The preferred route specified by the user.',
        examples: '101; 202; Route 401'
      },
      Object {
        name: 'Product',
        description: 'The product offered by a place.',
        examples: 'Clothes; Digital ASR Cameras; Fresh fish'
      },
      Object {
        name: 'PublicTransportationRoute',
        description: 'The name of the public transportation route that the user is searching for.',
        examples: 'Northeast corridor train; Bus route 3X'
      },
      Object {
        name: 'Rating',
        description: 'The rating of a place.',
        examples: '5 stars; 3 stars;  4 stars'
      },
      Object {
        name: 'ServiceProvided',
        description: '"This is the service provided by a business or place such as haircut, snow plowing, landscaping."',
        examples: 'haircut; mechanic; plumber'
      }
    ]
  },
  Object {
    name: 'Reminder',
    culture: 'en-us',
    description: 'The reminder domain provides intents and entities for creating, editing, and finding reminders.',
    examples: 'Change my interview to 9 am tomorrow; Remind me to buy milk on my way back home; Can you check if I have a reminder about Christine\'s birthday?',
    intents: Array [
      Object {
        name: 'Change',
        description: 'Change a reminder.',
        examples: 'Change my interview to 9 am tomorrow ; Move my assignment reminder to tomorrow'
      },
      Object {
        name: 'Create',
        description: 'Create a new reminder.',
        examples: 'Create a reminder; Remind me to buy milk;  I want to remember to call Rebecca when I\'m at home'
      },
      Object {
        name: 'Delete',
        description: 'Delete a reminder.',
        examples: 'Delete my picture reminder; Delete this reminder'
      },
      Object {
        name: 'Find',
        description: 'Find a reminder.',
        examples: 'Do I have a reminder about my anniversary?; Can you check if I have a reminder about Christine\'s birthday?'
      }
    ],
    entities: Array [
      Object {
        name: 'Text',
        description: 'The text description of a reminder.',
        examples: 'pick up dry cleaning; dropping my car off at the service center'
      }
    ]
  },
  Object {
    name: 'RestaurantReservation',
    culture: 'en-us',
    description: 'The Reservation domain provides intents and entities related to managing restaurant reservations.',
    examples: 'Reserve at Zucca for two for tonight; Book a table at BJ\'s for tomorrow;  Table for 3 in Palo Alto at 7',
    intents: Array [
      Object {
        name: 'Reserve',
        description: 'Request a reservation for a restaurant.',
        examples: 'Reserve at Zucca for two for tonight;  Book a table for tomorrow; Table for 3 in Palo Alto at 7'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'An event location or address for a reservation.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'Amenities',
        description: 'An attribute describing the amenities of a place.',
        examples: 'ocean view;  non smoking;'
      },
      Object {
        name: 'AppName',
        description: 'The name of an application for making reservations.',
        examples: 'OpenTable; Yelp; TripAdvisor'
      },
      Object {
        name: 'Atmosphere',
        description: 'A description of the atmosphere of a restaurant or other place.',
        examples: 'romantic; casual; good for groups'
      },
      Object {
        name: 'Cuisine',
        description: '"A type of food, cuisine or cuisine nationality."',
        examples: 'Chinese; Italian; Mexican'
      },
      Object {
        name: 'MealType',
        description: 'A meal type associated with a reservation.',
        examples: 'breakfast; dinner; lunch; supper'
      },
      Object {
        name: 'PlaceName',
        description: '"The name of a local business, restaurant, public attraction, or institution. "',
        examples: 'IHOP; Cheesecake Factory; Louvre'
      },
      Object {
        name: 'PlaceType',
        description: '"The type of a local business, restaurant, public attraction, or institution. "',
        examples: 'restaurant; opera; cinema'
      },
      Object {
        name: 'Rating',
        description: 'The rating of a place or restaurant.',
        examples: '5 stars; 3 stars;  4 stars'
      }
    ]
  },
  Object {
    name: 'Taxi',
    culture: 'en-us',
    description: 'The Taxi domain provides intents and entities for creating and managing taxi bookings.',
    examples: 'Get me a cab at 3 pm; How much longer do I have to wait for my taxi?; Cancel my Uber',
    intents: Array [
      Object {
        name: 'Book',
        description: 'Call a taxi.',
        examples: 'Get me a cab; Find a taxi;  Book me an uber x'
      },
      Object {
        name: 'Cancel',
        description: 'Cancel an action relating to booking a taxi.',
        examples: 'Cancel my taxi; Cancel my Uber'
      },
      Object {
        name: 'Track',
        description: 'Track a taxi route.',
        examples: 'How much longer do I have to wait for my taxi?; Where is my Uber?'
      }
    ],
    entities: Array [
      Object {
        name: 'Address',
        description: 'The address associated with booking a taxi.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationAddress',
        description: 'A destination location or address.',
        examples: 'Palo Alto;  300 112th Ave SE; Seattle'
      },
      Object {
        name: 'DestinationPlaceName',
        description: '"The name of a destination that is a local business, restaurant, public attraction, or institution. "',
        examples: 'Central Park; Safeway; Walmart'
      },
      Object {
        name: 'DestinationPlaceType',
        description: '"The type of a destination that is a local business, restaurant, public attraction, or institution. "',
        examples: 'Restaurant; Opera; Cinema'
      },
      Object {
        name: 'PlaceName',
        description: '"Name of local business, restaurant, public attraction, or institution. "',
        examples: 'Central Park; Safeway; Walmart'
      },
      Object {
        name: 'PlaceType',
        description: 'The type of place in a request to book a taxi.',
        examples: 'Restaurant; Opera; Cinema'
      },
      Object {
        name: 'TransportationCompany',
        description: 'The name of a transport provider.',
        examples: 'Amtrack;  Acela; Greyhound'
      },
      Object {
        name: 'TransportationType',
        description: 'The transportation type.',
        examples: 'Bus; Train; Driving'
      }
    ]
  },
  Object {
    name: 'Translate',
    culture: 'en-us',
    description: 'The Translate domain provides intents and entities related to translating text to a target language.',
    examples: 'Translate to French;  Translate hello to German; Translate this sentence to English',
    intents: Array [
      Object {
        name: 'Translate',
        description: 'Translate text to another language.',
        examples: 'Translate to French;  Translate hello to German'
      }
    ],
    entities: Array [
      Object {
        name: 'TargetLanguage',
        description: 'The target language of a translation.',
        examples: 'French; German; Korean'
      },
      Object {
        name: 'Text',
        description: 'The text to translate.',
        examples: 'Hello World;Good morning;Good evening'
      }
    ]
  },
  Object {
    name: 'TV',
    culture: 'en-us',
    description: 'The TV domain provides intents and entities for controlling TVs.',
    examples: 'Switch channel to BBC; Show TV guide; Watch National Geographic',
    intents: Array [
      Object {
        name: 'ChangeChannel',
        description: 'Change a channel on a TV.',
        examples: 'Change channel to CNN;  Switch channel to BBC; Go to channel 4'
      },
      Object {
        name: 'ShowGuide',
        description: 'Show the TV guide.',
        examples: 'Show TV guide; what is on movie channel now?; show my program list'
      },
      Object {
        name: 'WatchTV',
        description: 'Ask to watch a TV channel.',
        examples: 'I want to watch the Disney channel; go to TV please; Watch National Geographic'
      }
    ],
    entities: Array [
      Object {
        name: 'ChannelName',
        description: 'The name of a TV channel.',
        examples: 'CNN; BBC; Movie channel'
      }
    ]
  },
  Object {
    name: 'Utilities',
    culture: 'en-us',
    description: 'The Utilities domain provides intents for tasks that are common to many tasks, such as greetings, cancellation, confirmation, help, repetition, navigation, starting and stopping.',
    examples: 'Go back to Twitter; Please help; Repeat last question please',
    intents: Array [
      Object {
        name: 'Cancel',
        description: 'Cancel an action.',
        examples: 'Cancel the message; I don\'t want to send the email anymore'
      },
      Object {
        name: 'Confirm',
        description: 'Confirm an action.',
        examples: 'Yeah ohh I confirm;Good I am confirming;Okay I am confirming'
      },
      Object {
        name: 'GoBack',
        description: 'Go back one step or return to a previous step.',
        examples: 'Go back to Twitter; Go back a step; Go back'
      },
      Object {
        name: 'Help',
        description: 'Request for help.',
        examples: 'Please help; open help; help'
      },
      Object {
        name: 'Repeat',
        description: 'Repeat an action.',
        examples: 'Repeat last question please; repeat last song'
      },
      Object {
        name: 'ShowNext',
        description: 'Show the next item in a series.',
        examples: 'Show the next one; go to the next page'
      },
      Object {
        name: 'ShowPrevious',
        description: 'Show the previous item in a series.',
        examples: 'show previous one'
      },
      Object {
        name: 'StartOver',
        description: 'Restart the app or start a new session.',
        examples: 'Start over;  New session; restart'
      },
      Object {
        name: 'Stop',
        description: 'Stop an action.',
        examples: 'Stop saying this please;Shut up;Stop please'
      },
      Object {
        name: 'FinishTask',
        description: 'Finish a task the user started.',
        examples: 'I am done; I am finished; It is done'
      }
    ],
    entities: Array []
  },
  Object {
    name: 'Weather',
    culture: 'en-us',
    description: 'The Weather domain provides intents and entities for getting weather reports and forecasts',
    examples: 'weather in London in september; What\'s the 10 day forecast?; What\'s the average temperature in India in september?',
    intents: Array [
      Object {
        name: 'GetCondition',
        description: 'Get historic facts related to weather.',
        examples: 'weather in London in september;  what\'s the average temperature in India in september'
      },
      Object {
        name: 'GetForecast',
        description: 'Get the current weather and forecast for the next few days.',
        examples: 'How is the weather today?; What\'s the 10 day forecast; How will the weather be this weekend'
      }
    ],
    entities: Array [
      Object {
        name: 'Location',
        description: 'The absolute location for a weather request.',
        examples: 'Seattle; Paris; Palo Alto'
      }
    ]
  },
  Object {
    name: 'Web',
    culture: 'en-us',
    description: 'The Web domain provides intents and entities for navigating to a website.',
    examples: 'Navigate to facebook.com; Go to www.twitter.com; Navigate to www.bing.com',
    intents: Array [
      Object {
        name: 'Navigate',
        description: 'A request to navigate to a specified website.',
        examples: 'Navigate to facebook.com; Go to www.twitter.com'
      }
    ],
    entities: Array []
  },
  Object {
    name: 'Shopping',
    culture: 'en-us',
    description: 'A model for finding specific items or categories of items. The user can find and shop from specific shops. The user can check what is in their shopping cart, or check the status of an order. The user can also purchase or reorder items.',
    examples: 'Show me silver necklaces; How much is the leather jacket; delete the red shoes from my shopping cart',
    intents: Array [
      Object {
        name: 'AddToCart',
        description: 'User wants to add an item to their cart',
        examples: 'add the gold earrings to the shopping list; Add it to the shopping cart; Add this item then checkout'
      },
      Object {
        name: 'BuyItem',
        description: 'User wants to buy a specific item',
        examples: 'purchase home alone dvd; can you buy this item; I want to purchase this one'
      },
      Object {
        name: 'CheckCart',
        description: 'User want to check their cart for items',
        examples: 'Did I add milk to my shopping cart; have I already added shoes to my shopping cart; is pepsi in my shopping cart ?'
      },
      Object {
        name: 'CheckOrderStatus',
        description: 'User wants to check the status of their order',
        examples: 'when will my order be shipped; How long until my shipment gets here ?; when will I get my order'
      },
      Object {
        name: 'FindItem',
        description: 'User is searching for an item from categories',
        examples: 'Help me find a box of instant rice; take me to kitchen item section of this website; Please show me whether or not this site has oranges'
      },
      Object {
        name: 'GetDetails',
        description: 'User wants details of a specific item, other than the price of the item',
        examples: 'show my orders; Show me my shipping information; Thanksgiving turkey prices'
      },
      Object {
        name: 'GetPrice',
        description: 'User wants to know the price of an item',
        examples: 'How much are these candles ?; Give me all makeup prices; cortana price for eggs at walmart and the coupon discount added'
      },
      Object {
        name: 'GetRecommendation',
        description: 'User wants to get a recommendation',
        examples: 'show me gift ideas for mothers; "My mother deserves a really nice gift for Christmas , help"; Can you pick me out something for my stepson ?'
      },
      Object {
        name: 'GetReviews',
        description: 'User wants to know the reviews of an item',
        examples: 'show me reviews for apples; Show me some reviews for this Samsung printer; Show me reviews for this LG blender'
      },
      Object {
        name: 'GetWarrantyInfo',
        description: 'User wants to get information on a warranty',
        examples: 'Search warranty expiration date; show warranty information; Tell me when my phones $20 warranty will expire please.'
      },
      Object {
        name: 'RemoveFromCart',
        description: 'User wants to remove an item from the cart',
        examples: 'Remove Campbell \'s chicken noodle soup from my cart; Remove the floor lamp from my cart; Please remove the Campbell \'s chicken noodle soup from my cart'
      },
      Object {
        name: 'Reorder',
        description: 'User wants to reorder an item',
        examples: 'Reorder the Tupperware I bought on this site last week; Reorder the same deodorant as last time; I would like to reorder Budweiser'
      },
      Object {
        name: 'SubmitWarranty',
        description: 'User wants to submit a new warranty on an item',
        examples: 'All of my warranties choose warranty for fish washer submit; submit microwave warranty; For this item submit the warranty'
      },
      Object {
        name: 'AddCard',
        description: 'User want to add a credit card to their profile',
        examples: 'add Visa to my payment methods; add American express to payment; add visa to payment'
      }
    ],
    entities: Array [
      Object {
        name: 'BrandName',
        description: 'The company/brand of an item',
        examples: 'Yardley; pepsi; legos'
      },
      Object {
        name: 'Category',
        description: 'The user is looking for items in a category',
        examples: 'kitchen; makeup; gift'
      },
      Object {
        name: 'CreditCardName',
        description: 'The name of the user\'s credit card',
        examples: 'Visa; American express; visa'
      },
      Object {
        name: 'Item',
        description: 'The user is looking for an item (doesn\'t have to be from a specific category)',
        examples: 'earrings; shirts; corn'
      },
      Object {
        name: 'OrderReference',
        description: '"Order ref returns one item based on a time ordering, such as the release date for a category of goods."',
        examples: 'currently; current; last'
      },
      Object {
        name: 'Price',
        description: 'The price range for the item requested. Includes words like cheap and expensive',
        examples: '$5; ten dollars; under $20'
      },
      Object {
        name: 'Quantity',
        description: 'Number of items. Quantity includes numerals',
        examples: 'multi pack; one can; one bar'
      },
      Object {
        name: 'Rating',
        description: '"This is the rating of an item (not the price range). The phrases good, best, and top also go here"',
        examples: 'top; best; highest'
      },
      Object {
        name: 'Recipient',
        description: 'The user is looking for an item for a gender or a person',
        examples: 'mothers; mother; stepson'
      },
      Object {
        name: 'Size',
        description: 'Sizing information of an item. Includes words',
        examples: 'xl; large; Largest'
      },
      Object {
        name: 'WarrantyAttribute',
        description: 'The user wants to know about a certain attribute in a warranty',
        examples: 'expiration date; expire; expiration'
      },
      Object {
        name: 'WarrantyCost',
        description: 'The cost of a warrenty the user wants to know about.',
        examples: '$20; $500; $100'
      }
    ]
  }
] to have property length of 21 (got 22)
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value (node_modules\should\cjs\should.js:356:19)
      at responses.forEach.prebuiltDomainByCulture (test\language\languageUnderstandingTest.js:318:61)
      at Array.forEach (<anonymous>)
      at promiseDelay.then.then.then.returnedPromises (test\language\languageUnderstandingTest.js:303:27)
      at <anonymous>

  3) Language understanding (LUIS) Create app before, delete app after should return application version in JSON for this VERSION:
     AssertionError: expected Object {
  luis_schema_version: '3.1.0',
  versionId: '0.1',
  name: 'mocha-1539669756004',
  desc: 'This is my first modified dummy description',
  culture: 'en-us',
  intents: Array [
    Object { name: 'BookFlight' },
    Object { name: 'None' },
    Object { name: 'OrderFood' },
    Object {
      name: 'Weather.GetForecast',
      inherits: Object { domain_name: 'Weather', model_name: 'GetForecast' }
    }
  ],
  entities: Array [
    Object { name: 'Airline', roles: Array [] },
    Object { name: 'DrinkSize', roles: Array [] },
    Object {
      name: 'Location',
      children: Array [ 'LocationTo', 'LocationFrom' ],
      roles: Array []
    },
    Object {
      name: 'PassengerCategory',
      children: Array [ 'adult', 'child', 'infant' ],
      roles: Array []
    },
    Object {
      name: 'TravelClass',
      children: Array [ 'business', 'economy', 'first' ],
      roles: Array []
    }
  ],
  composites: Array [
    Object {
      name: 'TicketsOrder',
      children: Array [ 'number', 'PassengerCategory', 'TravelClass' ],
      roles: Array []
    }
  ],
  closedLists: Array [
    Object {
      name: 'Coastal Cities',
      subLists: Array [
        Object {
          canonicalForm: 'Barcelona',
          list: Array [ 'capital city of catalonia', 'bcn', 'barna', 'second spanish city' ]
        },
        Object { canonicalForm: 'madrid', list: Array [ 'mad' ] }
      ],
      roles: Array []
    }
  ],
  patternAnyEntities: Array [],
  regex_entities: Array [],
  prebuiltEntities: Array [
    Object { name: 'datetimeV2', roles: Array [] },
    Object { name: 'number', roles: Array [] }
  ],
  model_features: Array [],
  regex_features: Array [],
  patterns: Array [],
  utterances: Array [
    Object {
      text: '"i need to know the temperature at bangor, me"',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'book a flight from seattle to hong kong',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationFrom', startPos: 19, endPos: 25 },
        Object { entity: 'Location::LocationTo', startPos: 30, endPos: 38 }
      ]
    },
    Object {
      text: 'book me 2 adult business tickets to paris tomorrow on air france',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'TicketsOrder', startPos: 8, endPos: 23 },
        Object { entity: 'PassengerCategory', startPos: 10, endPos: 14 },
        Object { entity: 'TravelClass', startPos: 16, endPos: 23 },
        Object { entity: 'Location::LocationTo', startPos: 36, endPos: 40 },
        Object { entity: 'Airline', startPos: 54, endPos: 63 }
      ]
    },
    Object {
      text: 'book me a flight to paris',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 20, endPos: 24 }
      ]
    },
    Object {
      text: 'buy a plane ticket to bangor me',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 22, endPos: 30 }
      ]
    },
    Object { text: 'drive me home', intent: 'None', entities: Array [] },
    Object {
      text: 'find out tomorrow\'s weather',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'flight to seattle',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 10, endPos: 16 }
      ]
    },
    Object {
      text: 'fly to cairo',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 7, endPos: 11 }
      ]
    },
    Object {
      text: 'forecast in celcius',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'get the forcast for me',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'go to paris',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 6, endPos: 10 }
      ]
    },
    Object {
      text: 'i want to order lunch',
      intent: 'OrderFood',
      entities: Array []
    },
    Object {
      text: 'provide me by toronto weather please',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'reservation for new york city',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location', startPos: 16, endPos: 23 },
        Object { entity: 'Location::LocationTo', startPos: 25, endPos: 28 }
      ]
    },
    Object {
      text: 'soliciting today\'s weather',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'ticket to paris',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 10, endPos: 14 }
      ]
    },
    Object {
      text: 'ticket to portland',
      intent: 'BookFlight',
      entities: Array [
        Object { entity: 'Location::LocationTo', startPos: 10, endPos: 17 }
      ]
    },
    Object {
      text: 'what is the weather in redmond ?',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'will it be raining in ranchi',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'will it rain this weekend',
      intent: 'Weather.GetForecast',
      entities: Array []
    },
    Object {
      text: 'will it snow today',
      intent: 'Weather.GetForecast',
      entities: Array []
    }
  ],
  settings: Array []
} to have only keys luis_schema_version, versionId, name, desc, culture, intents, entities, composites, closedLists, regex_entities, bing_entities, model_features, regex_features, utterances
	missing keys: bing_entities
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value [as keys] (node_modules\should\cjs\should.js:356:19)
      at promiseDelay.then.then (test\language\languageUnderstandingTest.js:558:43)
      at <anonymous>

  4) Language understanding (LUIS) Create app before, delete app after should get list of entities in this VERSION:
     AssertionError: expected Object {
  id: 'ab6ec72b-c171-4e6d-ab68-351b51bc1abf',
  name: 'Airline',
  typeId: 1,
  readableType: 'Entity Extractor',
  roles: Array []
} to have only keys id, name, typeId, readableType
    expected Object {
      id: 'ab6ec72b-c171-4e6d-ab68-351b51bc1abf',
      name: 'Airline',
      typeId: 1,
      readableType: 'Entity Extractor',
      roles: Array []
    } to have size 4
        expected 5 to be 4
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value [as keys] (node_modules\should\cjs\should.js:356:19)
      at promiseDelay.then.then (test\language\languageUnderstandingTest.js:622:50)
      at <anonymous>

  5) Language understanding (LUIS) Create app before, delete app after should get APP versions:
     AssertionError: expected Array [] to have property length of 3 (got 0)
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value (node_modules\should\cjs\should.js:356:19)
      at promiseDelay.then.then (test\language\languageUnderstandingTest.js:672:73)
      at <anonymous>

  6) Language understanding (LUIS) Create app before, delete app after should get app VERSION info:
     AssertionError: expected Array [] to have property length of 3 (got 0)
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value (node_modules\should\cjs\should.js:356:19)
      at promiseDelay.then.then (test\language\languageUnderstandingTest.js:724:66)
      at <anonymous>

  7) Language understanding (LUIS) Create app before, delete app after  should get VERSION models:
     AssertionError: expected Object {
  id: 'ab6ec72b-c171-4e6d-ab68-351b51bc1abf',
  name: 'Airline',
  typeId: 1,
  readableType: 'Entity Extractor',
  roles: Array []
} to have only keys id, name, typeId, readableType
    expected Object {
      id: 'ab6ec72b-c171-4e6d-ab68-351b51bc1abf',
      name: 'Airline',
      typeId: 1,
      readableType: 'Entity Extractor',
      roles: Array []
    } to have size 4
        expected 5 to be 4
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value [as keys] (node_modules\should\cjs\should.js:356:19)
      at promiseDelay.then.then (test\language\languageUnderstandingTest.js:831:46)
      at <anonymous>

  8) Text analytics Detect language (POST) should return response:
     StatusCodeError: 401 - {"statusCode":401,"message":"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at node_modules\request-promise-core\lib\plumbing.js:97:41
      at bound (domain.js:301:14)
      at runBound (domain.js:314:12)
      at tryCatcher (node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (node_modules\bluebird\js\release\promise.js:512:31)
      at Promise._settlePromise (node_modules\bluebird\js\release\promise.js:569:18)
      at Promise._settlePromiseCtx (node_modules\bluebird\js\release\promise.js:606:10)
      at Async._drainQueue (node_modules\bluebird\js\release\async.js:138:12)
      at Async._drainQueues (node_modules\bluebird\js\release\async.js:143:10)
      at Immediate.Async.drainQueues (node_modules\bluebird\js\release\async.js:17:14)

  9) Text analytics Key phrases (POST) should return response:
     StatusCodeError: 401 - {"statusCode":401,"message":"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at node_modules\request-promise-core\lib\plumbing.js:97:41
      at bound (domain.js:301:14)
      at runBound (domain.js:314:12)
      at tryCatcher (node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (node_modules\bluebird\js\release\promise.js:512:31)
      at Promise._settlePromise (node_modules\bluebird\js\release\promise.js:569:18)
      at Promise._settlePromiseCtx (node_modules\bluebird\js\release\promise.js:606:10)
      at Async._drainQueue (node_modules\bluebird\js\release\async.js:138:12)
      at Async._drainQueues (node_modules\bluebird\js\release\async.js:143:10)
      at Immediate.Async.drainQueues (node_modules\bluebird\js\release\async.js:17:14)

  10) Text analytics Sentiment (POST) should return response:
     StatusCodeError: 401 - {"statusCode":401,"message":"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at node_modules\request-promise-core\lib\plumbing.js:97:41
      at bound (domain.js:301:14)
      at runBound (domain.js:314:12)
      at tryCatcher (node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (node_modules\bluebird\js\release\promise.js:512:31)
      at Promise._settlePromise (node_modules\bluebird\js\release\promise.js:569:18)
      at Promise._settlePromiseCtx (node_modules\bluebird\js\release\promise.js:606:10)
      at Async._drainQueue (node_modules\bluebird\js\release\async.js:138:12)
      at Async._drainQueues (node_modules\bluebird\js\release\async.js:143:10)
      at Immediate.Async.drainQueues (node_modules\bluebird\js\release\async.js:17:14)

  11) Text analytics Link entity should return response:
     StatusCodeError: 401 - {"statusCode":401,"message":"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at node_modules\request-promise-core\lib\plumbing.js:97:41
      at bound (domain.js:301:14)
      at runBound (domain.js:314:12)
      at tryCatcher (node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (node_modules\bluebird\js\release\promise.js:512:31)
      at Promise._settlePromise (node_modules\bluebird\js\release\promise.js:569:18)
      at Promise._settlePromiseCtx (node_modules\bluebird\js\release\promise.js:606:10)
      at Async._drainQueue (node_modules\bluebird\js\release\async.js:138:12)
      at Async._drainQueues (node_modules\bluebird\js\release\async.js:143:10)
      at Immediate.Async.drainQueues (node_modules\bluebird\js\release\async.js:17:14)

  12) Academic knowledge GraphSearch should return response:
     StatusCodeError: 500 - {"statusCode":500,"message":"Internal server error","activityId":"dd13d47c-a7ce-430a-b60c-cb332e46b827"}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at node_modules\request-promise-core\lib\plumbing.js:97:41
      at bound (domain.js:301:14)
      at runBound (domain.js:314:12)
      at tryCatcher (node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (node_modules\bluebird\js\release\promise.js:512:31)
      at Promise._settlePromise (node_modules\bluebird\js\release\promise.js:569:18)
      at Promise._settlePromiseCtx (node_modules\bluebird\js\release\promise.js:606:10)
      at Async._drainQueue (node_modules\bluebird\js\release\async.js:138:12)
      at Async._drainQueues (node_modules\bluebird\js\release\async.js:143:10)
      at Immediate.Async.drainQueues (node_modules\bluebird\js\release\async.js:17:14)

  13) QnA maker v4 "before all" hook:
     StatusCodeError: 429 - {"error":{"code":"RateLimitExceeded","message":"Rate limit is exceeded. Try again later."}}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at Request.plumbing.callback (node_modules\request-promise-core\lib\plumbing.js:104:33)
      at Request.RP$callback [as _callback] (node_modules\request-promise-core\lib\plumbing.js:46:31)
      at Request.self.callback (node_modules\request\request.js:186:22)
      at Request.<anonymous> (node_modules\request\request.js:1163:10)
      at IncomingMessage.<anonymous> (node_modules\request\request.js:1085:12)
      at endReadableNT (_stream_readable.js:1056:12)
      at _combinedTickCallback (internal/process/next_tick.js:138:11)
      at process._tickDomainCallback (internal/process/next_tick.js:218:9)

  14) Recommendations Get all models should get response:
     StatusCodeError: 404 - {"statusCode":404,"message":"Resource not found"}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at Request.plumbing.callback (node_modules\request-promise-core\lib\plumbing.js:104:33)
      at Request.RP$callback [as _callback] (node_modules\request-promise-core\lib\plumbing.js:46:31)
      at Request.self.callback (node_modules\request\request.js:186:22)
      at Request.<anonymous> (node_modules\request\request.js:1163:10)
      at IncomingMessage.<anonymous> (node_modules\request\request.js:1085:12)
      at endReadableNT (_stream_readable.js:1056:12)
      at _combinedTickCallback (internal/process/next_tick.js:138:11)
      at process._tickDomainCallback (internal/process/next_tick.js:218:9)

  15) Bing entity search Get entities should return response:
     StatusCodeError: 401 - {"statusCode":401,"message":"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."}
      at new StatusCodeError (node_modules\request-promise-core\lib\errors.js:32:15)
      at Request.plumbing.callback (node_modules\request-promise-core\lib\plumbing.js:104:33)
      at Request.RP$callback [as _callback] (node_modules\request-promise-core\lib\plumbing.js:46:31)
      at Request.self.callback (node_modules\request\request.js:186:22)
      at Request.<anonymous> (node_modules\request\request.js:1163:10)
      at IncomingMessage.<anonymous> (node_modules\request\request.js:1085:12)
      at endReadableNT (_stream_readable.js:1056:12)
      at _combinedTickCallback (internal/process/next_tick.js:138:11)
      at process._tickDomainCallback (internal/process/next_tick.js:218:9)

  16) Bing Image Search v7 Image Insights should get image insights:
     AssertionError: expected Object {
  _type: 'ImageInsights',
  instrumentation: Object { _type: 'ResponseInstrumentation' },
  imageInsightsToken: 'bcid_2423F9DEFF972E78EE6FADEEE56E376D*thid_R.2423F9DEFF972E78EE6FADEEE56E376D'
} to have property bestRepresentativeQuery
      at Assertion.fail (node_modules\should\cjs\should.js:275:17)
      at Assertion.value [as properties] (node_modules\should\cjs\should.js:356:19)
      at client.imageInsights.then (test\search\bingImageSearchV7Test.js:27:39)
      at <anonymous>

  17) Video indexer Upload video in body "before all" hook:
     RequestError: Error: getaddrinfo ENOTFOUND videobreakdown.azure-api.net videobreakdown.azure-api.net:443
      at new RequestError (node_modules\request-promise-core\lib\errors.js:14:15)
      at Request.plumbing.callback (node_modules\request-promise-core\lib\plumbing.js:87:29)
      at Request.RP$callback [as _callback] (node_modules\request-promise-core\lib\plumbing.js:46:31)
      at self.callback (node_modules\request\request.js:186:22)
      at Request.onRequestError (node_modules\request\request.js:878:8)
      at TLSSocket.socketErrorListener (_http_client.js:387:9)
      at emitErrorNT (internal/streams/destroy.js:64:8)
      at _combinedTickCallback (internal/process/next_tick.js:138:11)
      at process._tickDomainCallback (internal/process/next_tick.js:218:9)

  18) Video indexer Accounts should get accounts:
     RequestError: Error: getaddrinfo ENOTFOUND videobreakdown.azure-api.net videobreakdown.azure-api.net:443
      at new RequestError (node_modules\request-promise-core\lib\errors.js:14:15)
      at Request.plumbing.callback (node_modules\request-promise-core\lib\plumbing.js:87:29)
      at Request.RP$callback [as _callback] (node_modules\request-promise-core\lib\plumbing.js:46:31)
      at self.callback (node_modules\request\request.js:186:22)
      at Request.onRequestError (node_modules\request\request.js:878:8)
      at TLSSocket.socketErrorListener (_http_client.js:387:9)
      at emitErrorNT (internal/streams/destroy.js:64:8)
      at _combinedTickCallback (internal/process/next_tick.js:138:11)
      at process._tickDomainCallback (internal/process/next_tick.js:218:9)

  19) Video indexer Search should search:
     RequestError: Error: getaddrinfo ENOTFOUND videobreakdown.azure-api.net videobreakdown.azure-api.net:443
      at new RequestError (node_modules\request-promise-core\lib\errors.js:14:15)
      at Request.plumbing.callback (node_modules\request-promise-core\lib\plumbing.js:87:29)
      at Request.RP$callback [as _callback] (node_modules\request-promise-core\lib\plumbing.js:46:31)
      at self.callback (node_modules\request\request.js:186:22)
      at Request.onRequestError (node_modules\request\request.js:878:8)
      at TLSSocket.socketErrorListener (_http_client.js:387:9)
      at emitErrorNT (internal/streams/destroy.js:64:8)
      at _combinedTickCallback (internal/process/next_tick.js:138:11)
      at process._tickDomainCallback (internal/process/next_tick.js:218:9)



