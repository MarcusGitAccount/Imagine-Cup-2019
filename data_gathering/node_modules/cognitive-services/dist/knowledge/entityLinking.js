"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');

/**
 * Entity Linking is a natural language processing tool to help analyzing text for your application. 
 * 
 * @augments commonService
 * {@link https://westus.dev.cognitive.microsoft.com/docs/services/56f0eabfca730713cc392442/operations/56f0eabfca73070e44d0f39c|documentation}
 */

var entityLinking = function (_commonService) {
    _inherits(entityLinking, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function entityLinking(_ref) {
        var apiKey = _ref.apiKey,
            endpoint = _ref.endpoint;

        _classCallCheck(this, entityLinking);

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.endpoints = ["westus.api.cognitive.microsoft.com"];
        return _this;
    }

    /**
    Recognize a named-entity from given text and aligning a textual mention of the entity to an appropriate entry in a knowledge base.
    Example Parameters: {
        "selection": null,
        "offset": null
    }
    @returns {Promise.<object>}
    */


    entityLinking.prototype.linkEntity = function linkEntity(_ref2) {
        var parameters = _ref2.parameters,
            body = _ref2.body;


        var operation = {
            "path": "entitylinking/v1.0/link",
            "method": "POST",
            "operationId": "56f0eabfca73070e44d0f39c",
            "parameters": [{
                "name": "selection",
                "description": "The specific word or phrase within the text that is to be entity linked. If not specified, the service will try to recognize and identify all the entities within the input text.",
                "value": null,
                "required": false,
                "type": "queryStringParam",
                "typeName": "string"
            }, {
                "name": "offset",
                "description": "The location (in offset by characters) of the selected word or phrase within the input text. Used to distinguish when there are multiple instances of the same words or phrases within the input text. Only valid when the selection is specified.",
                "value": null,
                "required": false,
                "type": "queryStringParam",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            parameters: parameters,
            headers: { 'Content-type': 'text/plain' },
            body: body
        });
    };

    return entityLinking;
}(commonService);

;

module.exports = entityLinking;