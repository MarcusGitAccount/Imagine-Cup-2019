'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./helpers'),
    verifyBody = _require.verifyBody,
    verifyEndpoint = _require.verifyEndpoint,
    verifyHeaders = _require.verifyHeaders,
    verifyParameters = _require.verifyParameters;

var request = require('request-promise');
var fs = require('fs');

var commonService = function () {
    function commonService(_ref) {
        var apiKey = _ref.apiKey,
            endpoint = _ref.endpoint,
            _ref$validateEndpoint = _ref.validateEndpoint,
            validateEndpoint = _ref$validateEndpoint === undefined ? true : _ref$validateEndpoint;

        _classCallCheck(this, commonService);

        this.endpoints = [];
        this.apiKey = apiKey;
        this.endpoint = endpoint;
        this.validateEndpoint = validateEndpoint;
        this.apiKeyHeaderName = 'Ocp-Apim-Subscription-Key';
    }

    commonService.prototype.getIso3CodesForLanguages = function getIso3CodesForLanguages() {
        return ['afr', 'sqi', 'amh', 'ara', 'hye', 'asm', 'aze', 'bng', 'ben', 'eus', 'bel', 'bos', 'bsb', 'bre', 'bul', 'cat', 'kur', 'chr', 'zho', 'zh-hk', 'zh-tw', 'hrv', 'ces', 'dan', 'prs', 'nld', 'eng', 'est', 'fil', 'fin', 'fra', 'glg', 'kat', 'deu', 'ell', 'guj', 'hau', 'heb', 'hin', 'hun', 'isl', 'ibo', 'ind', 'iku', 'gle', 'xho', 'zul', 'ita', 'jpn', 'kan', 'kaz', 'khm', 'quc', 'kin', 'swa', 'kok', 'kor', 'kir', 'lao', 'lav', 'lit', 'ltz', 'mac', 'msa', 'mym', 'mlt', 'mri', 'mar', 'mon', 'nep', 'nob', 'nno', 'ori', 'pus', 'fas', 'pol', 'por', '1or', 'ful', 'pan', 'pnb', 'qup', 'ron', 'rus', 'gla', 'srp', 'srn', '1rp', 'sot', 'nso', 'tsn', 'sin', 'sin', 'slk', 'slv', 'spa', 'swe', 'tgk', 'tam', 'tat', 'tel', 'tha', 'tir', 'tur', 'tuk', 'ukr', 'urd', 'uig', 'uzb', 'cat', 'vie', 'cym', 'wol', 'yor'];
    };

    commonService.prototype.getOperationIdFromUrl = function getOperationIdFromUrl(url) {
        var splittedUrl = url.split('/');
        return splittedUrl[splittedUrl.length - 1];
    };

    commonService.prototype.makeRequest = function makeRequest() {
        var _this = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var operation = data.operation || {};
        operation.parameters = operation.parameters || [];
        var parameters = data.parameters || {};
        var headers = data.headers || {};
        var body = data.body || null;

        var contentTypeHeader = headers['Content-type'] || headers['Content-Type'] || "";

        return verifyBody(operation.parameters, body, contentTypeHeader).then(function (params) {
            operation.parameters = params;
            return verifyParameters(operation.parameters, parameters);
        }).then(function () {
            return verifyHeaders(operation.headers, headers);
        }).then(function () {
            return verifyEndpoint(_this.endpoints, _this.endpoint, _this.validateEndpoint);
        }).then(function () {
            headers[_this.apiKeyHeaderName] = _this.apiKey;

            var path = operation.path;

            // mandatory route params
            operation.parameters.forEach(function (param) {
                if (parameters[param.name] && param.type == 'routeParam') {
                    path = path.split('{' + param.name + '}').join(parameters[param.name]);
                }
            });

            // query params
            var queryStringParams = {};
            operation.parameters.forEach(function (param) {
                if (parameters[param.name] && param.type == 'queryStringParam') {
                    queryStringParams[param.name] = parameters[param.name];
                }
            });

            var uri = 'https://' + _this.endpoint + '/' + path;

            var options = {
                uri: uri,
                method: operation.method,
                headers: headers,
                qs: queryStringParams,
                json: true // GET: Automatically parses the JSON string in the response, POST: Automatically stringifies the body to JSON
            };

            if (contentTypeHeader == 'multipart/form-data' && parameters.path && parameters.path !== null) {
                options.formData = {
                    file: fs.createReadStream(parameters.path)
                };
            } else if (body != null) {
                options.body = body;
                if (contentTypeHeader && contentTypeHeader.indexOf('json') == -1) {
                    options.json = false; // do not stringify the request body to JSON
                }
                // POST: receive the response properly
                options.transform = function (body, res) {
                    var responseContentType = res.headers['content-type'];
                    if (responseContentType && responseContentType.indexOf('application/json') != -1) {
                        try {
                            return JSON.parse(body);
                        } catch (e) {
                            // do nothing. return the body as it is
                        }
                    }
                    if (res.headers['operation-location']) {
                        return res.headers['operation-location'];
                    }
                    return body;
                };
            }
            return request(options);
        });
    };

    return commonService;
}();

module.exports = commonService;