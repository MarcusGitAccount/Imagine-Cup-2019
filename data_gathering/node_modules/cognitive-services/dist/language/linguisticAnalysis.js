"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');

/**
 * The Linguistic Analysis APIs rovide access to natural language processing (NLP) tools that identify the structure of text. 
 * 
 * The current release provides three types of analysis:
    - Sentence separation and tokenization
    - Part-of-speech tagging
    - Constituency parsing
 * @augments commonService
 * {@link https://westus.dev.cognitive.microsoft.com/docs/services/56ea598f778daf01942505ff/operations/56ea5a1cca73071fd4b102bb|documentation}
 */

var linguisticAnalysis = function (_commonService) {
    _inherits(linguisticAnalysis, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function linguisticAnalysis(_ref) {
        var apiKey = _ref.apiKey,
            endpoint = _ref.endpoint;

        _classCallCheck(this, linguisticAnalysis);

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.endpoints = ["westus.api.cognitive.microsoft.com"];
        return _this;
    }

    /**
     * Analyze text with specific analyzers.
     * @returns {Promise.<object>}
     */


    linguisticAnalysis.prototype.analyzeText = function analyzeText(_ref2) {
        var body = _ref2.body;


        var operation = {
            "path": "linguistics/v1.0/analyze",
            "method": "POST",
            "operationId": "56ea5a1cca73071fd4b102bb",
            "parameters": [{
                "name": "language",
                "description": "The language of input text.",
                "value": null,
                "required": true,
                "type": "inBody",
                "typeName": "string"
            }, {
                "name": "analyzerIds",
                "description": "The analyzers array.",
                "value": null,
                "required": true,
                "type": "inBody",
                "typeName": "string"
            }, {
                "name": "text",
                "description": "The text to be analyzed. Its maximum length is 65536.",
                "value": null,
                "required": true,
                "type": "inBody",
                "typeName": "string"
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Returns a list of strings representing which analyzers are currently registered.
     * @returns {Promise.<object>}
     */
    linguisticAnalysis.prototype.listAnalyzers = function listAnalyzers() {

        var operation = {
            "path": "linguistics/v1.0/analyzers",
            "method": "GET",
            "operationId": "56ea59bfca73071fd4b102ba"
        };

        return this.makeRequest({
            operation: operation
        });
    };

    return linguisticAnalysis;
}(commonService);

;

module.exports = linguisticAnalysis;