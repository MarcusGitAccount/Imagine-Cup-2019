"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('./commonService');

/**
 * Token service
 * 
 * @augments commonService
 */

var tokenService = function (_commonService) {
    _inherits(tokenService, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     */
    function tokenService(_ref) {
        var apiKey = _ref.apiKey;

        _classCallCheck(this, tokenService);

        var endpoint = "api.cognitive.microsoft.com";

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.endpoints = [endpoint];
        return _this;
    }

    /**
    Get JWT authorization token
    
    @returns {Promise.<string>}
    */


    tokenService.prototype.getToken = function getToken() {

        var operation = {
            "path": "sts/v1.0/issueToken",
            "method": "POST"
        };

        return this.makeRequest({
            operation: operation
        });
    };

    return tokenService;
}(commonService);

;

module.exports = tokenService;