'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');
var csv = require('fast-csv');
var _ = require("underscore");
var promiseRetry = require('promise-retry');
var promiseDelay = require('sleep-promise');

var count = 0;

/**
 * Language Understanding API is a cloud-based service that provides advanced natural language processing over raw text, and intent and entity detection.
 * Your LUIS domain-specific model must be in built, trained, and published before using this endpoint.
 * @augments commonService
 * {@link https://docs.microsoft.com/en-us/azure/cognitive-services/luis/home}
 */

var languageUnderstanding = function (_commonService) {
    _inherits(languageUnderstanding, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function languageUnderstanding(_ref) {
        var apiKey = _ref.apiKey,
            appId = _ref.appId,
            versionId = _ref.versionId,
            endpoint = _ref.endpoint;

        _classCallCheck(this, languageUnderstanding);

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.KeyLength = 36;
        _this.APIVersion = "2.1.0";
        _this.versionId = versionId;
        _this.appId = appId;
        _this.serviceId = "LUIS.v2.0";
        _this.endpoints = ["australiaeast.api.cognitive.microsoft.com", "brazilsouth.api.cognitive.microsoft.com", "eastasia.api.cognitive.microsoft.com", "eastus.api.cognitive.microsoft.com", "eastus2.api.cognitive.microsoft.com", "northeurope.api.cognitive.microsoft.com", "southcentralus.api.cognitive.microsoft.com", "southeastasia.api.cognitive.microsoft.com", "westus.api.cognitive.microsoft.com", "westus2.api.cognitive.microsoft.com", "westcentralus.api.cognitive.microsoft.com", "westeurope.api.cognitive.microsoft.com"];
        _this.INFO = {
            APPS: "",
            ASSISTANTS: "assistants",
            DOMAINS: "domains",
            IMPORT: "import",
            USAGESCENARIOS: "usagescenarios",
            CULTURE: "cultures",
            CUSTOMPREBUILTDOMAINS: "customprebuiltdomains"
        };
        _this.APPINFO = {
            ENDPOINTS: "endpoints",
            SETTINGS: "settings",
            VERSIONS: "versions",
            PERMISSIONS: "permissions",
            PUBLISH: "publish",
            QUERYLOGS: "querylogs",
            APP: ""
        };

        _this.VERSIONINFO = {
            //DEPRECATED - ASSIGNEDKEY:"assignedkey",
            CLONE: "clone",
            CLOSEDLISTS: "closedlists",
            COMPOSITEENTITIES: "compositeentities",
            VERSION: "",
            //LISTS: "closedlists",
            PREBUILTDOMAINS: "customprebuiltdomains",
            PREBUILTENTITIES: "customprebuiltentities",
            PREBUILTINTENTS: "customprebuiltintents",
            PREBUILTMODELS: "customprebuiltmodels",
            ENTITIES: "entities",
            EXAMPLE: "example",
            EXAMPLES: "examples",
            EXPORT: "export",
            FEATURES: "features",
            HIERARCHICALENTITIES: "hierarchicalentities",
            INTENTS: "intents",
            LISTPREBUILTS: "listprebuilts",
            MODELS: "models",
            //PATTERNS: "patterns", //deprecated
            PHRASELISTS: "phraselists",
            PREBUILTS: "prebuilts",
            TRAIN: "train",
            TRAINSTATUS: "train"
        };
        _this.PREBUILTDOMAINCULTURES = [{ "en-us": 21 }, { "zh-cn": 13 }, { "fr-fr": 0 }, { "fr-ca": 0 }, { "es-es": 0 }, { "es-mx": 0 }, { "it-it": 0 }, { "de-de": 0 }, { "ja-jp": 0 }, { "pt-br": 0 }, { "ko-kr": 0 }, { "nl-nl": 0 }];
        _this.CULTURECOUNT = _this.PREBUILTDOMAINCULTURES.length;
        _this.PREBUILTDOMAINTOTALCOUNT = 0;
        _this.PREBUILTDOMAINCULTURES.forEach(function (culture) {
            _this.PREBUILTDOMAINTOTALCOUNT += Object.values(culture)[0];
        });

        _this.retryInterval = 2000;
        _this.retryCount = 10;

        return _this;
    }

    languageUnderstanding.prototype.propertyNamesToArray = function propertyNamesToArray(obj) {

        var myNameArray = [];
        for (var key in obj) {
            myNameArray.push(key);
        }

        return myNameArray;
    };

    /**
     * info: INFO
     * culture: string "en-us"
     * Returns LUIS meta information using enum to determine request
      * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.getLUIS = function getLUIS(info, cultureOnly) {

        var validINFO = [this.INFO.ASSISTANTS, this.INFO.APPS, this.INFO.CULTURE, this.INFO.DOMAINS, this.INFO.USAGESCENARIOS, this.INFO.CUSTOMPREBUILTDOMAINS];

        if (!_.contains(validINFO, info)) throw Error("invalid info param '" + info + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + info,
            "method": "GET"
        };

        // add culture for prebuilt domain
        if (info === this.INFO.CUSTOMPREBUILTDOMAINS && cultureOnly) {
            operation.path += "/" + cultureOnly;
        }

        switch (info) {
            case this.INFO.APPS:
                operation.parameters = [{
                    "name": "skip",
                    "description": "Used for paging. The number of entries to skip. Default value is 0.",
                    "value": 0,
                    "required": false,
                    "typeName": "number",
                    "type": "queryStringParam"
                }, {
                    "name": "take",
                    "description": "Used for paging. The number of entries to return. Maximum page size is 500. Default is 100.",
                    "value": 100,
                    "required": false,
                    "typeName": "number",
                    "type": "queryStringParam"
                }];
                break;
            case this.INFO.CULTURE:
            case this.INFO.DOMAINS:
            case this.INFO.USAGESCENARIOS:
            case this.INFO.CUSTOMPREBUILTDOMAINS:
            case this.INFO.ASSISTANTS:
                break;
            default:
                throw Error('error in switch - unknown info ' + info);

        }

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' }
        });
    };
    /**
     * Set LUIS values
     * @param {*} info 
     * @param {*} body 
     * @param {*} params 
     * @returns {Promise.<object>}
     */


    languageUnderstanding.prototype.setLUIS = function setLUIS(info, body, parameters) {
        var validINFO = [this.INFO.IMPORT, this.INFO.CUSTOMPREBUILTDOMAINS];

        if (!_.contains(validINFO, info)) throw Error("invalid info param '" + info + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + info,
            "method": "POST"
        };

        switch (info) {
            case this.INFO.IMPORT:
                operation.parameters = [{
                    "name": "appName",
                    "description": "The imported application name.",
                    "value": null,
                    "required": false,
                    "type": "queryStringParam",
                    "typeName": "string"
                }];
                break;
            case this.INFO.CUSTOMPREBUILTDOMAINS:
                operation.parameters = [{
                    "name": "domainName",
                    "description": "The domain name",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }, {
                    "name": "culture",
                    "description": "The culture.",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }];
                break;
            default:
                throw Error('error in switch - unknown info ' + info);
        }

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body,
            parameters: parameters
        });
    };
    /**
     * Get app info 
     * Returns app info
     * @param {APPINFO}
     * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.getAppInfo = function getAppInfo(appinfo) {
        var _this2 = this;

        var validAPPINFO = [this.APPINFO.APP, this.APPINFO.ENDPOINTS, this.APPINFO.PERMISSIONS, this.APPINFO.QUERYLOGS, this.APPINFO.SETTINGS, this.APPINFO.VERSIONS];

        if (!_.contains(validAPPINFO, appinfo)) throw Error("invalid info param '" + appinfo + "'");

        switch (appinfo) {
            case this.APPINFO.APP:
            case this.APPINFO.ENDPOINTS:
            case this.APPINFO.PERMISSIONS:
            case this.APPINFO.QUERYLOGS:
            case this.APPINFO.SETTINGS:
            case this.APPINFO.VERSIONS:
                /*
                    operation.parameters = [{
                        "name": "email",
                        "description": "email",
                        "value": null,
                        "required": true,
                        "type": "inBody",
                        "typeName": "string"
                    }];*/
                break;
            default:
                throw Error("error in switch");

        }

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appId + "/" + appinfo,
            "method": "GET"
        };

        switch (appinfo) {
            case this.APPINFO.QUERYLOGS:
                return this.makeRequest({
                    operation: operation,
                    headers: { 'Content-type': 'application/json' }
                }).then(function (csvString) {
                    return _this2.queryStringConversion(csvString);
                });
                break;
            default:
                return this.makeRequest({
                    operation: operation,
                    headers: { 'Content-type': 'application/json' }
                });
        }
    };

    /**
     * Set app info 
     * Returns no data
     * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.setAppInfo = function setAppInfo(body, appinfo) {

        var validAPPINFO = [this.APPINFO.PUBLISH, this.APPINFO.PERMISSIONS];

        if (!_.contains(validAPPINFO, appinfo)) throw Error("invalid info param '" + appinfo + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appId + "/" + appinfo,
            "method": "POST"
        };

        switch (appinfo) {
            case this.APPINFO.PERMISSIONS:
                operation.parameters = [{
                    "name": "email",
                    "description": "email",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }];
                break;
            case this.APPINFO.PUBLISH:
                operation.parameters = [{
                    "name": "versionId",
                    "description": "Version of the app. Default is '0.1', 10 char max ",
                    "value": "0.1",
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }, {
                    "name": "isStaging",
                    "description": "Publish destination: staging or production.",
                    "value": null,
                    "required": false,
                    "type": "inBody",
                    "typeName": "boolean"
                }, {
                    "name": "region",
                    "description": "Azure region",
                    "value": null,
                    "required": false,
                    "type": "inBody",
                    "typeName": "string",
                    "options": ["westus", "eastus2", "westcentralus", "westeurope", "southeastasia"]
                }];
                break;
            default:
                throw Error('error in switch - unknown appinfo ' + appinfo);
        }

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Update app info 
     * Returns no data
     * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.updateAppInfo = function updateAppInfo(body, appinfo) {

        var validAPPINFO = [this.APPINFO.APP, this.APPINFO.SETTINGS, this.APPINFO.PERMISSIONS];

        if (!_.contains(validAPPINFO, appinfo)) throw Error("invalid info param '" + appinfo + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appId + "/" + appinfo,
            "method": "PUT"
        };

        switch (appinfo) {
            case this.APPINFO.APP:
                operation.parameters = [{
                    "name": "name",
                    "description": "New name of the application",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }, {
                    "name": "description",
                    "description": "New description of the application",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }];
                break;
            case this.APPINFO.SETTINGS:
                operation.parameters = [{
                    "name": "public",
                    "description": "",
                    "value": null,
                    "required": false,
                    "type": "inBody",
                    "typeName": "boolean"
                }];
                break;
            case this.APPINFO.PERMISSIONS:
                operation.parameters = [{
                    "name": "emails",
                    "description": "array of emails",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "array"
                }];
                break;
            default:
                throw Error('error in switch - unknown appinfo ' + appinfo);

        }

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Delete app info 
     * Returns no data
     * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.deleteAppInfo = function deleteAppInfo(body, appinfo) {

        var validAPPINFO = [this.APPINFO.PERMISSIONS, this.APPINFO.APP];

        if (!_.contains(validAPPINFO, appinfo)) throw Error("invalid info param '" + appinfo + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appId + "/" + appinfo,
            "method": "DELETE"
        };

        switch (appinfo) {
            case this.APPINFO.PERMISSIONS:
                operation.parameters = [{
                    "name": "email",
                    "description": "single email address",
                    "value": null,
                    "required": true,
                    "type": "inBody",
                    "typeName": "string"
                }];
                break;
            case this.APPINFO.APP:
                // no params
                break;
            default:
                throw Error("error in switch");
        }

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };
    /**
     * Returns version info
     * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.getVersionInfo = function getVersionInfo(versioninfo, parameters) {

        var validVERSIONINFO = [this.VERSIONINFO.EXPORT, this.VERSIONINFO.VERSION, this.VERSIONINFO.CLOSEDLISTS, this.VERSIONINFO.TRAINSTATUS, this.VERSIONINFO.ENTITIES, this.VERSIONINFO.EXAMPLES, this.VERSIONINFO.INTENTS, this.VERSIONINFO.FEATURES, this.VERSIONINFO.HIERARCHICALENTITIES, this.VERSIONINFO.LISTPREBUILTS, this.VERSIONINFO.MODELS];

        if (!_.contains(validVERSIONINFO, versioninfo)) throw Error("invalid info param '" + versioninfo + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appId + "/versions/" + this.versionId + "/" + versioninfo,
            "method": "GET"
        };

        switch (versioninfo) {
            case this.VERSIONINFO.INTENTS:
            case this.VERSIONINFO.FEATURES:
            case this.VERSIONINFO.ENTITIES:
            case this.VERSIONINFO.EXAMPLES:
            case this.VERSIONINFO.LISTPREBUILTS:
            case this.VERSIONINFO.HIERARCHICALENTITIES:
            case this.VERSIONINFO.MODELS:
                operation.parameters = [{
                    "name": "skip",
                    "value": 0,
                    "required": false,
                    "typeName": "number",
                    "type": "queryStringParam"
                }, {
                    "name": "take",
                    "value": 100,
                    "required": false,
                    "typeName": "number",
                    "type": "queryStringParam"
                }];
                break;
            case this.VERSIONINFO.TRAINSTATUS:
                // no parameters
                break;
            default:
        };

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            parameters: parameters
        });
    };
    /**
     * Set Version info
     * @returns {Promise.<object>}    
     */


    languageUnderstanding.prototype.setVersionInfo = function setVersionInfo(parameters, body, versioninfo) {

        if (parameters === undefined) parameters = {};

        var validVERSIONINFO = [this.VERSIONINFO.CLONE, this.VERSIONINFO.TRAIN, this.VERSIONINFO.CLOSEDLISTS];

        if (!_.contains(validVERSIONINFO, versioninfo)) throw Error("invalid version info param '" + versioninfo + "'");

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appId + "/versions/" + this.versionId + "/" + versioninfo,
            "method": "POST"
        };

        switch (versioninfo) {
            case this.VERSIONINFO.CLONE:
            case this.VERSIONINFO.CLOSEDLISTS:
                operation.parameters = [{
                    "name": "appId",
                    "description": "The application id to clone.",
                    "value": null,
                    "required": true,
                    "type": "queryStringParam",
                    "typeName": "string"
                }, {
                    "name": "versionId",
                    "description": "The version id to clone.",
                    "value": null,
                    "required": true,
                    "type": "queryStringParam",
                    "typeName": "string"
                }];
                parameters.appId = this.appId;
                parameters.versionId = this.versionId;
                break;
            case this.VERSIONINFO.TRAIN:
                // no parameters
                break;
            default:
                throw Error("error in switch - unexpected VERSIONINFO");
        }

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body,
            parameters: parameters
        });
    };
    /**
     * Returns the detected intent, entities and entity values with a score for each intent. 
     * Scores close to 1 indicate 100% certainty that the identified intent is correct. 
     * Irrespective of the value, the intent with the highest score is returned.
     * @returns {Promise.<object>}
     */


    languageUnderstanding.prototype.detectIntent = function detectIntent(_ref2) {
        var parameters = _ref2.parameters,
            body = _ref2.body;


        var operation = {
            "path": "luis/v2.0/apps/" + this.appId + "?" + "verbose=" + parameters.verbose + "&log=" + parameters.log,
            "method": "POST",
            "parameters": [{
                "name": "timezoneOffset",
                "description": "The timezone offset for the location of the request",
                "value": null,
                "required": false,
                "type": "queryStringParam",
                "typeName": "number"
            }, {
                "name": "verbose",
                "description": "If true will return all intents instead of just the topscoring intent",
                "value": false,
                "required": false,
                "type": "queryStringParam",
                "typeName": "boolean"
            }, {
                "name": "spellCheck",
                "description": "enable Bing Spell checking. You must have an Azure Bing spell checker subscription.",
                "value": false,
                "required": false,
                "type": "queryStringParam",
                "typeName": "boolean"
            }, {
                "name": "staging",
                "description": "Use staging endpoint.",
                "value": false,
                "required": false,
                "type": "queryStringParam",
                "typeName": "boolean"
            }, {
                "name": "log",
                "description": "Log query. Required for suggested review utterances.",
                "value": false,
                "required": false,
                "type": "queryStringParam",
                "typeName": "boolean"
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Checks if all models of app are trained
     * @returns {Boolean}
     */
    languageUnderstanding.prototype.isTrained = function isTrained(trainingStatus) {
        var untrainedModels = trainingStatus.filter(function (model) {
            return model.details.status == 'Fail' || model.details.status == 'InProgress';
        });
        return untrainedModels.length === 0;
    };

    languageUnderstanding.prototype.waitUntilTrained = function waitUntilTrained(client) {
        var _this3 = this;

        count += 1;

        return promiseRetry(function (retry, number) {

            return promiseDelay(_this3.retryInterval).then(function () {
                return client.getVersionInfo(client.VERSIONINFO.TRAINSTATUS);
            }).then(function (response) {
                // 2xx http response 
                var trained = client.isTrained(response);

                if (count < _this3.retryCount && !trained) retry("not trained");

                return response;
            }).catch(function (err) {
                throw err;
            });
        });
    };
    /**
     * Convert csv string to array
     * @param {string} csvString 
     * @returns {Promise.<object>}   
     */


    languageUnderstanding.prototype.queryStringConversion = function queryStringConversion(csvString) {
        return new Promise(function (resolve, reject) {
            var results = [];
            csv.fromString(csvString, { headers: true }).on("data", function (parsedObject) {
                results.push(parsedObject);
            }).on("end", function () {
                resolve(results);
            }).on("error", function (err) {
                reject(err);
            });
        });
    };

    return languageUnderstanding;
}(commonService);

;

module.exports = languageUnderstanding;