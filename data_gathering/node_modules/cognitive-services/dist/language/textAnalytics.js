"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');

/**
 * Text Analytics API is a cloud-based service that provides advanced natural language processing over raw text, and includes three main functions: sentiment analysis, key phrase extraction, and language detection.
 * @augments commonService
 * {@link https://westus.dev.cognitive.microsoft.com/docs/services/TextAnalytics.V2.0/operations/56f30ceeeda5650db055a3c7|documentation}
 */

var textAnalytics = function (_commonService) {
    _inherits(textAnalytics, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function textAnalytics(_ref) {
        var apiKey = _ref.apiKey,
            endpoint = _ref.endpoint;

        _classCallCheck(this, textAnalytics);

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.endpoints = ["australiaeast.api.cognitive.microsoft.com", "brazilsouth.api.cognitive.microsoft.com", "eastasia.api.cognitive.microsoft.com", "eastus.api.cognitive.microsoft.com", "eastus2.api.cognitive.microsoft.com", "northeurope.api.cognitive.microsoft.com", "southcentralus.api.cognitive.microsoft.com", "southeastasia.api.cognitive.microsoft.com", "westus.api.cognitive.microsoft.com", "westus2.api.cognitive.microsoft.com", "westcentralus.api.cognitive.microsoft.com", "westeurope.api.cognitive.microsoft.com"];
        return _this;
    }

    /**
     * Returns the detected language and a numeric score between 0 and 1. 
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120 languages are supported.
     * Irrespective of the value, the language with the highest score is returned.
     * @returns {Promise.<object>}
     */


    textAnalytics.prototype.detectLanguage = function detectLanguage(_ref2) {
        var headers = _ref2.headers,
            body = _ref2.body;


        var operation = {
            "path": "text/analytics/v2.0/languages",
            "method": "POST",
            "operationId": "56f30ceeeda5650db055a3c7",
            "headers": [{
                "name": "Content-Type",
                "description": "Media type of the body sent to the API.",
                "options": ["application/json", "text/json"],
                "required": false
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: headers,
            body: body
        });
    };

    /**
     * Returns a list of strings denoting the key talking points in the input text. 
     * Each document supplied must have a language. Pass in one of: de,en,es,fi,fr,it,ja,pl,pt-BR,pt-PT,sv. 
     * See https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview for the complete list of support languages.
     * @returns {Promise.<object>}
     */
    textAnalytics.prototype.keyPhrases = function keyPhrases(_ref3) {
        var headers = _ref3.headers,
            body = _ref3.body;


        var operation = {
            "path": "text/analytics/v2.0/keyPhrases",
            "method": "POST",
            "operationId": "56f30ceeeda5650db055a3c6",
            "headers": [{
                "name": "Content-Type",
                "description": "Media type of the body sent to the API.",
                "options": ["application/json", "text/json"],
                "required": false
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: headers,
            body: body
        });
    };

    /**
     * Returns a numeric score between 0 and 1. Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. 
     * Sentiment score is generated using classification techniques. 
     * The input features to the classifier include n-grams, features generated from part-of-speech tags, and word embeddings.
     * @returns {Promise.<object>}
     */
    textAnalytics.prototype.sentiment = function sentiment(_ref4) {
        var headers = _ref4.headers,
            body = _ref4.body;


        var operation = {
            "path": "text/analytics/v2.0/sentiment",
            "method": "POST",
            "operationId": "56f30ceeeda5650db055a3c9",
            "headers": [{
                "name": "Content-Type",
                "description": "Media type of the body sent to the API.",
                "options": ["application/json", "text/json"],
                "required": false
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: headers,
            body: body
        });
    };

    /**
    The API returns a list of recognized entities in a given document. To get even more information on each recognized entity we recommend using the Bing Entity Search API by querying for the recognized entities names.
    @returns {Promise.<object>}
    */
    textAnalytics.prototype.linkEntity = function linkEntity(_ref5) {
        var headers = _ref5.headers,
            body = _ref5.body;


        var operation = {
            "path": "text/analytics/v2.0/entities",
            "method": "POST",
            "operationId": "5ac4251d5b4ccd1554da7634",
            "headers": [{
                "name": "Content-Type",
                "description": "Media type of the body sent to the API.",
                "options": ["application/json", "text/json"],
                "required": false
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: headers,
            body: body
        });
    };

    return textAnalytics;
}(commonService);

;

module.exports = textAnalytics;